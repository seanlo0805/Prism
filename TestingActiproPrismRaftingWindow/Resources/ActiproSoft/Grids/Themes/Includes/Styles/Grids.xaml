<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:componentModel="clr-namespace:System.ComponentModel;assembly=WindowsBase"
					xmlns:grids="clr-namespace:ActiproSoftware.Windows.Controls.Grids;assembly=ActiproSoftware.Grids.Wpf"
					xmlns:gridsPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Grids.Primitives;assembly=ActiproSoftware.Grids.Wpf"
					xmlns:gridsPropertyEditors="clr-namespace:ActiproSoftware.Windows.Controls.Grids.PropertyEditors;assembly=ActiproSoftware.Grids.Wpf"
					xmlns:products="clr-namespace:ActiproSoftware.Products.Grids;assembly=ActiproSoftware.Grids.Wpf"
					xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
					xmlns:system="clr-namespace:System;assembly=mscorlib"
					xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
					>

	<shared:BooleanNotConverter x:Key="BooleanNotConverter" />
	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
	<shared:ColorToBrushConverter x:Key="ColorToBrushConverter" />
	<shared:NoOpConverter x:Key="NoOpConverter" />
	<shared:ThicknessConverter x:Key="ThicknessConverter" />
	
	<shared:ConditionalConverter x:Key="NonNullVisibilityConverter">
		<shared:ConditionalConverter.TrueValue>
			<Visibility>Visible</Visibility>
		</shared:ConditionalConverter.TrueValue>
		<shared:ConditionalConverter.FalseValue>
			<Visibility>Collapsed</Visibility>
		</shared:ConditionalConverter.FalseValue>
	</shared:ConditionalConverter>
	<shared:ConditionalConverter x:Key="NullVisibilityConverter">
		<shared:ConditionalConverter.TrueValue>
			<Visibility>Collapsed</Visibility>
		</shared:ConditionalConverter.TrueValue>
		<shared:ConditionalConverter.FalseValue>
			<Visibility>Visible</Visibility>
		</shared:ConditionalConverter.FalseValue>
	</shared:ConditionalConverter>

	<!-- Geometries -->
	<Geometry x:Key="SortAscendingGeometry">M 5.5,3.5 L 8.5,0.5 L 11.5,3.5</Geometry>
	<Geometry x:Key="SortDescendingGeometry">M 5.5,0.5 L 8.5,3.5 L 11.5,0.5</Geometry>

	
	<!-- products:GridsLogo -->
	<Style x:Key="{x:Type products:GridsLogo}" TargetType="products:GridsLogo">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="products:GridsLogo">
					<Canvas Width="512" Height="512" Canvas.Left="0" Canvas.Top="0">
	                    <Path x:Name="Glass" Width="260.618" Height="260.619" Canvas.Left="70.3735" Canvas.Top="26.0993" Stretch="Fill" StrokeThickness="10" StrokeMiterLimit="2.75" Stroke="#FF686752" Data="F1 M 268.367,261.848C 210.136,299.229 132.624,282.326 95.2433,224.091C 57.863,165.859 74.7658,88.3478 133,50.97C 191.231,13.5881 268.742,30.4919 306.121,88.7233C 343.504,146.956 326.599,224.468 268.367,261.848 Z ">
		                    <Path.Fill>
			                    <RadialGradientBrush RadiusX="0.575448" RadiusY="0.575449" Center="0.415122,0.409627" GradientOrigin="0.415122,0.409627">
				                    <RadialGradientBrush.GradientStops>
					                    <GradientStop Color="#FFFDFEFF" Offset="5.34058e-005"/>
					                    <GradientStop Color="#FFD9F7F9" Offset="0.87001"/>
					                    <GradientStop Color="#FFB5F1F3" Offset="1"/>
				                    </RadialGradientBrush.GradientStops>
				                    <RadialGradientBrush.RelativeTransform>
					                    <TransformGroup>
						                    <RotateTransform CenterX="0.415122" CenterY="0.409627" Angle="56.3099"/>
					                    </TransformGroup>
				                    </RadialGradientBrush.RelativeTransform>
			                    </RadialGradientBrush>
		                    </Path.Fill>
	                    </Path>
	                    <Path x:Name="Stem" Width="74.6963" Height="77.9849" Canvas.Left="244.303" Canvas.Top="243.546" Stretch="Fill" StrokeThickness="10" StrokeMiterLimit="2.75" Stroke="#FF686752" Data="F1 M 278.191,316.531L 249.303,271.532L 285.109,248.546L 314,293.546L 278.191,316.531 Z ">
		                    <Path.Fill>
			                    <LinearGradientBrush StartPoint="0.315498,0.626425" EndPoint="0.783949,0.626425">
				                    <LinearGradientBrush.RelativeTransform>
					                    <TransformGroup>
						                    <SkewTransform CenterX="0.315498" CenterY="0.626425" AngleX="2.69332" AngleY="0"/>
						                    <RotateTransform CenterX="0.315498" CenterY="0.626425" Angle="-34.4178"/>
					                    </TransformGroup>
				                    </LinearGradientBrush.RelativeTransform>
				                    <LinearGradientBrush.GradientStops>
					                    <GradientStop Color="#FFBFC1A0" Offset="0"/>
					                    <GradientStop Color="#FFCFD0AE" Offset="0.299394"/>
					                    <GradientStop Color="#FFDFE0BD" Offset="0.522472"/>
					                    <GradientStop Color="#FFBFC1A0" Offset="1"/>
				                    </LinearGradientBrush.GradientStops>
			                    </LinearGradientBrush>
		                    </Path.Fill>
	                    </Path>
	                    <Path x:Name="Handle" Width="162.967" Height="200.095" Canvas.Left="264.468" Canvas.Top="282.668" Stretch="Fill" StrokeThickness="10" StrokeMiterLimit="2.75" Stroke="#FF564928" Data="F1 M 369.808,477.762L 269.468,321.446L 322.093,287.668L 422.435,443.976L 369.808,477.762 Z ">
		                    <Path.Fill>
			                    <LinearGradientBrush StartPoint="0.35152,0.580565" EndPoint="0.671342,0.580565">
				                    <LinearGradientBrush.RelativeTransform>
					                    <TransformGroup>
						                    <SkewTransform CenterX="0.35152" CenterY="0.580565" AngleX="11.4782" AngleY="0"/>
						                    <RotateTransform CenterX="0.35152" CenterY="0.580565" Angle="-28.4886"/>
					                    </TransformGroup>
				                    </LinearGradientBrush.RelativeTransform>
				                    <LinearGradientBrush.GradientStops>
					                    <GradientStop Color="#FF5D5942" Offset="0"/>
					                    <GradientStop Color="#FF807950" Offset="0.315654"/>
					                    <GradientStop Color="#FFA4995E" Offset="0.550847"/>
					                    <GradientStop Color="#FF615D44" Offset="1"/>
				                    </LinearGradientBrush.GradientStops>
			                    </LinearGradientBrush>
		                    </Path.Fill>
	                    </Path>
                    </Canvas>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- TreeItemExpansionToggleButtonStyle -->
	<Style x:Key="TreeItemExpansionToggleButtonStyle" TargetType="gridsPrimitives:TreeItemExpansionToggleButton">		
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBorderNormalBrushKey}}" />

		<Setter Property="Width" Value="16" />
		<Setter Property="Height" Value="Auto" />

		<Setter Property="Focusable" Value="False" />
		<Setter Property="HorizontalAlignment" Value="Right" />
		<Setter Property="Margin" Value="0,0,4,0" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="VerticalAlignment" Value="Center" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Border Width="16" Height="16" Background="Transparent">
						<Path x:Name="path" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" Data="M 4.5,0.5 L 4.5,8.5 L 8.5,4.5 Z"
								Width="10" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="path" Property="Data" Value="M 3.5,6.5 L 8.5,6.5 L 8.5,1.5 Z" />
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBackgroundCheckedBrushKey}}" />
							<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBorderCheckedBrushKey}}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBackgroundHoverBrushKey}}" />
							<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBorderHoverBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- gridsPrimitives:TreeItemExpansionToggleButton -->
	<Style x:Key="{x:Type gridsPrimitives:TreeItemExpansionToggleButton}" TargetType="gridsPrimitives:TreeItemExpansionToggleButton" BasedOn="{StaticResource TreeItemExpansionToggleButtonStyle}">
	</Style>

	<!-- grids:TreeListBox -->
	<Style x:Key="{x:Type grids:TreeListBox}" TargetType="grids:TreeListBox">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />

		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Contained" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Once" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
		<Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />

		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<VirtualizingStackPanel />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="grids:TreeListBox">
					<shared:ElementChrome x:Name="chrome" Background="{TemplateBinding Background}"
							BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListBackgroundDisabledBrushKey}}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderDisabledBrushKey}}"
							BorderThickness="{TemplateBinding BorderThickness}" 
							BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.ListElementChromeBorderStyleKey}}" SnapsToDevicePixels="true">
						<Grid>
							<ScrollViewer x:Name="PART_ScrollViewer" Padding="{TemplateBinding Padding}" Focusable="False"
										  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										  >
								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
							<ContentPresenter x:Name="emptyContentPresenter" ContentTemplate="{TemplateBinding EmptyContentTemplate}" Content="{TemplateBinding EmptyContent}" Visibility="Collapsed" />
						</Grid>
					</shared:ElementChrome>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEmpty" Value="True">
							<Setter TargetName="emptyContentPresenter" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- grids:TreeListBoxItem -->
	<Style x:Key="{x:Type grids:TreeListBoxItem}" TargetType="grids:TreeListBoxItem">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />
		<Setter Property="InnerBorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderNormalThicknessKey}}" />
		
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />

		<Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Once" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />

		<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderNormalCornerRadiusKey}}" />
		<Setter Property="themes:ThemeProperties.IsGlassEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListIsGlassEnabledBooleanKey}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="grids:TreeListBoxItem">
					<Grid>
						<shared:ElementChrome x:Name="chrome" Background="{TemplateBinding Background}"
								BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundDisabledBrushKey}}"
								BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundHoverBrushKey}}"
								BackgroundFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundSelectedFocusedBrushKey}}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderDisabledBrushKey}}"
								BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderHoverBrushKey}}"
								BorderBrushFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderSelectedFocusedBrushKey}}"
								BorderThickness="{TemplateBinding BorderThickness}"
								InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderNormalBrushKey}}"
								InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderDisabledBrushKey}}"
								InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderHoverBrushKey}}"
								InnerBorderBrushFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderSelectedFocusedBrushKey}}"
								InnerBorderThickness="{TemplateBinding InnerBorderThickness}"
								CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}"
								SnapsToDevicePixels="true">
							<shared:PixelSnapper VerticalRoundMode="CeilingToEven">
								<Grid>
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IndentAmount}" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>

									<gridsPrimitives:TreeItemExpansionToggleButton x:Name="PART_ExpanderButton" Style="{TemplateBinding ToggleExpansionButtonStyle}" 
										Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpandable, Converter={StaticResource BooleanToVisibilityConverter}}" 
										IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded, Mode=TwoWay}" 
										/>
									<ContentPresenter Grid.Column="1" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
								</Grid>
							</shared:PixelSnapper>
						</shared:ElementChrome>
						<Rectangle x:Name="dropIndicator" Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IndentAmount, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left'}"
								   Height="2" Fill="{TemplateBinding Foreground}" VerticalAlignment="Top" Visibility="Collapsed" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="DropIndicatorArea" Value="Before">
							<Setter TargetName="dropIndicator" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="DropIndicatorArea" Value="After">
							<Setter TargetName="dropIndicator" Property="Visibility" Value="Visible" />
							<Setter TargetName="dropIndicator" Property="VerticalAlignment" Value="Bottom" />
						</Trigger>
						<Trigger Property="DropIndicatorArea" Value="On">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsSelectable" Value="true" />
								<Condition Property="IsSelected" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsSelectable" Value="true" />
								<Condition Property="IsSelected" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="BackgroundHover" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="BorderBrushHover" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="InnerBorderBrushHover" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="false" />
								<Condition Property="IsSelected" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundSelectedFocusedBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Focused" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="false" />
								<Condition Property="IsSelected" Value="true" />
								<Condition Property="grids:TreeListBox.IsSelectionActive" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundSelectedNormalBrushKey}}" />
							<Setter TargetName="chrome" Property="BackgroundFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundSelectedNormalBrushKey}}" />
							<Setter TargetName="chrome" Property="BorderBrushFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderSelectedNormalBrushKey}}" />
							<Setter TargetName="chrome" Property="InnerBorderBrushFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderSelectedNormalBrushKey}}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- gridsPrimitives:TreeListViewColumnResizeGripper -->
	<Style x:Key="{x:Type gridsPrimitives:TreeListViewColumnResizeGripper}" TargetType="gridsPrimitives:TreeListViewColumnResizeGripper">
		<Setter Property="Cursor" Value="SizeWE" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Margin" Value="0,0,-5,0" />
		<Setter Property="Width" Value="10" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="gridsPrimitives:TreeListViewColumnResizeGripper">
					<Rectangle Fill="Transparent" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- grids:TreeListViewColumnHeader -->
	<Style x:Key="{x:Type grids:TreeListViewColumnHeader}" TargetType="grids:TreeListViewColumnHeader">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderForegroundNormalBrushKey}}" />

		<Setter Property="themes:ThemeProperties.IsGlassEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListIsGlassEnabledBooleanKey}}" />

		<Setter Property="Padding" Value="3,1" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="SnapsToDevicePixels" Value="True" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="grids:TreeListViewColumnHeader">
					<Grid>
						<shared:ElementChrome x:Name="PART_Chrome" Background="{TemplateBinding Background}"
								BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBackgroundDisabledBrushKey}}"
								BackgroundFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBackgroundSelectedNormalBrushKey}}"
								BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBackgroundHoverBrushKey}}"
								BackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBackgroundPressedBrushKey}}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBorderDisabledBrushKey}}"
								BorderBrushFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBorderSelectedNormalBrushKey}}"
								BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBorderHoverBrushKey}}"
								BorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBorderPressedBrushKey}}"
								BorderThickness="{TemplateBinding BorderThickness}" 
								BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderElementChromeBorderStyleKey}}"
								SnapsToDevicePixels="true">
							<Grid>
								<Grid.RowDefinitions>
									<RowDefinition MaxHeight="7" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<Rectangle x:Name="highlight"
										Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ThemeProperties.IsGlassEnabled), Converter={StaticResource BooleanToVisibilityConverter}}" />
								<Border Grid.RowSpan="2" Padding="{TemplateBinding Padding}">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										
										<ContentPresenter x:Name="headerContent"
											VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
											<ContentPresenter.Resources>
												<Style TargetType="TextBlock">
													<Setter Property="TextTrimming" Value="CharacterEllipsis" />
												</Style>
											</ContentPresenter.Resources>
										</ContentPresenter>
										
										<Path x:Name="sortArrow" Grid.Column="1" Width="12" Height="4" Stroke="{TemplateBinding Foreground}" StrokeThickness="0.65" 
											  StrokeStartLineCap="Square" StrokeEndLineCap="Square" VerticalAlignment="Center" Visibility="Collapsed" />
									</Grid>
								</Border>
							
								<gridsPrimitives:TreeListViewColumnResizeGripper x:Name="PART_ResizeGripper" Grid.RowSpan="2" HorizontalAlignment="Right"
										Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsResizeGripperEnabled, Converter={StaticResource BooleanToVisibilityConverter}}" />
							</Grid>
						</shared:ElementChrome>

						<Rectangle x:Name="dropIndicator" Margin="0,0,-1,0" Width="2" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Left" Visibility="Collapsed" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="SortDirection" Value="Ascending">
							<Setter TargetName="sortArrow" Property="Data" Value="{StaticResource SortAscendingGeometry}" />
							<Setter TargetName="sortArrow" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="SortDirection" Value="Descending">
							<Setter TargetName="sortArrow" Property="Data" Value="{StaticResource SortDescendingGeometry}" />
							<Setter TargetName="sortArrow" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="DropIndicatorArea" Value="Before">
							<Setter TargetName="dropIndicator" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="DropIndicatorArea" Value="After">
							<Setter TargetName="dropIndicator" Property="Visibility" Value="Visible" />
							<Setter TargetName="dropIndicator" Property="HorizontalAlignment" Value="Right" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="Role" Value="Normal" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Chrome" Property="State" Value="Hover" />
							<Setter TargetName="highlight" Property="Fill" Value="#75FFFFFF" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsPressed" Value="true" />
								<Condition Property="Role" Value="Normal" />
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Chrome" Property="State" Value="Pressed" />
							<Setter TargetName="highlight" Property="Fill" Value="#75FFFFFF" />
						</MultiTrigger>
						<Trigger Property="Height" Value="Auto">
							<Setter Property="MinHeight" Value="20" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="PART_Chrome" Property="State" Value="Disabled" />
							<Setter TargetName="highlight" Property="Fill" Value="{x:Null}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- TreeListViewScrollViewerStyle -->
	<Style x:Key="TreeListViewScrollViewerStyle" TargetType="ScrollViewer">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ScrollViewer">
					<Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(grids:TreeListView.FrozenColumnsWidth)}" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<Rectangle Grid.Row="2" Grid.ColumnSpan="3" Fill="{DynamicResource {x:Static themes:AssetResourceKeys.ScrollViewerSpacerBackgroundNormalBrushKey}}" />
						
						<Border Grid.ColumnSpan="2" Background="{DynamicResource {x:Static themes:AssetResourceKeys.ListColumnHeaderBackgroundNormalBrushKey}}" ClipToBounds="True"
								Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(grids:TreeListView.ColumnHeaderVisibility)}">
							<gridsPrimitives:TreeListViewHeaderRowPanel>
								<grids:TreeListViewColumnHeader x:Name="PART_PaddingColumnHeader" Role="Padding" />
							</gridsPrimitives:TreeListViewHeaderRowPanel>
						</Border>
						
						<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="1" Grid.ColumnSpan="2"
                                                KeyboardNavigation.DirectionalNavigation="Local"
                                                Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						
						<ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Row="2" Grid.Column="1" Orientation="Horizontal"
                                   Minimum="0.0" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}"
                                   Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalOffset, Mode=OneWay}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Cursor="Arrow" />
						
						<ScrollBar Name="PART_VerticalScrollBar" Grid.RowSpan="2" Grid.Column="2" Orientation="Vertical"
                                   Minimum="0.0" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}"
                                   Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalOffset, Mode=OneWay}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Cursor="Arrow" />
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- TreeListViewStyle -->
	<Style x:Key="TreeListViewStyle" TargetType="grids:TreeListView">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />

		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Contained" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Once" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
		<Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />

		<Setter Property="ItemsPanel">
			<Setter.Value>
				<ItemsPanelTemplate>
					<VirtualizingStackPanel />
				</ItemsPanelTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="grids:TreeListView">
					<shared:ElementChrome x:Name="chrome" Background="{TemplateBinding Background}"
							BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListBackgroundDisabledBrushKey}}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderDisabledBrushKey}}"
							BorderThickness="{TemplateBinding BorderThickness}" 
							BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.ListElementChromeBorderStyleKey}}" SnapsToDevicePixels="true">
						<Grid>
							<ScrollViewer x:Name="PART_ScrollViewer" Padding="{TemplateBinding Padding}" Focusable="False" Style="{StaticResource TreeListViewScrollViewerStyle}"
										  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										  grids:TreeListView.ColumnHeaderVisibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=AreColumnHeadersVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
										  >
								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
							<ContentPresenter x:Name="emptyContentPresenter" ContentTemplate="{TemplateBinding EmptyContentTemplate}" Content="{TemplateBinding EmptyContent}" Visibility="Collapsed"
											  Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ColumnHeaderHeight, Converter={StaticResource ThicknessConverter}, ConverterParameter='Top'}" />
						</Grid>
					</shared:ElementChrome>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEmpty" Value="True">
							<Setter TargetName="emptyContentPresenter" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- grids:TreeListView -->
	<Style x:Key="{x:Type grids:TreeListView}" TargetType="grids:TreeListView" BasedOn="{StaticResource TreeListViewStyle}">
	</Style>
	
	<!-- TreeListViewItemContainerStyle -->
	<Style x:Key="TreeListViewItemContainerStyle" TargetType="grids:TreeListViewItem">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />
		<Setter Property="InnerBorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderNormalThicknessKey}}" />

		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />

		<Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Once" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />

		<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderNormalCornerRadiusKey}}" />
		<Setter Property="themes:ThemeProperties.IsGlassEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListIsGlassEnabledBooleanKey}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="grids:TreeListViewItem">
					<Grid>
						<shared:ElementChrome x:Name="chrome" Background="{TemplateBinding Background}"
								BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundDisabledBrushKey}}"
								BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundHoverBrushKey}}"
								BackgroundFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundSelectedFocusedBrushKey}}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderDisabledBrushKey}}"
								BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderHoverBrushKey}}"
								BorderBrushFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderSelectedFocusedBrushKey}}"
								BorderThickness="{TemplateBinding BorderThickness}"
								InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderNormalBrushKey}}"
								InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderDisabledBrushKey}}"
								InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderHoverBrushKey}}"
								InnerBorderBrushFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderSelectedFocusedBrushKey}}"
								InnerBorderThickness="{TemplateBinding InnerBorderThickness}"
								CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}"
								SnapsToDevicePixels="True" />
						
						<gridsPrimitives:TreeListViewItemRowPanel HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
							<gridsPrimitives:TreeItemExpansionToggleButton x:Name="PART_ExpanderButton" Style="{TemplateBinding ToggleExpansionButtonStyle}" 
								Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpandable, Converter={StaticResource BooleanToVisibilityConverter}}" 
								IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded, Mode=TwoWay}" 
								/>
						</gridsPrimitives:TreeListViewItemRowPanel>
						
						<Rectangle x:Name="dropIndicator" Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IndentAmount, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left'}"
								   Height="2" Fill="{TemplateBinding Foreground}" VerticalAlignment="Top" Visibility="Collapsed" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="DropIndicatorArea" Value="Before">
							<Setter TargetName="dropIndicator" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="DropIndicatorArea" Value="After">
							<Setter TargetName="dropIndicator" Property="Visibility" Value="Visible" />
							<Setter TargetName="dropIndicator" Property="VerticalAlignment" Value="Bottom" />
						</Trigger>
						<Trigger Property="DropIndicatorArea" Value="On">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsSelectable" Value="true" />
								<Condition Property="IsSelected" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="IsSelectable" Value="true" />
								<Condition Property="IsSelected" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="BackgroundHover" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="BorderBrushHover" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="InnerBorderBrushHover" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="false" />
								<Condition Property="IsSelected" Value="true" />
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundSelectedFocusedBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Focused" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="false" />
								<Condition Property="IsSelected" Value="true" />
								<Condition Property="grids:TreeListBox.IsSelectionActive" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundSelectedNormalBrushKey}}" />
							<Setter TargetName="chrome" Property="BackgroundFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundSelectedNormalBrushKey}}" />
							<Setter TargetName="chrome" Property="BorderBrushFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderSelectedNormalBrushKey}}" />
							<Setter TargetName="chrome" Property="InnerBorderBrushFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderSelectedNormalBrushKey}}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- grids:TreeListViewItem -->
	<Style x:Key="{x:Type grids:TreeListViewItem}" TargetType="grids:TreeListViewItem" BasedOn="{StaticResource TreeListViewItemContainerStyle}">
	</Style>

	<!-- grids:TreeListViewItemCell -->
	<Style x:Key="{x:Type grids:TreeListViewItemCell}" TargetType="grids:TreeListViewItemCell">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumStartBackgroundNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="0" />

		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Padding" Value="3,1" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="SnapsToDevicePixels" Value="True" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="grids:TreeListViewItemCell">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
							Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
						<ContentPresenter Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IndentAmount, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left'}" 
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- EmbeddedButtonStyle -->
	<Style x:Key="EmbeddedButtonStyle" TargetType="ButtonBase" BasedOn="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedButtonBaseStyleKey}}">
		<Setter Property="Focusable" Value="True" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="IsTabStop" Value="True" />
		<Setter Property="MinWidth" Value="17" />
		<Setter Property="VerticalAlignment" Value="Stretch" />
	</Style>
	
	<!-- PropertyGridItemBaseContainerStyle -->
	<Style x:Key="PropertyGridItemBaseContainerStyle" TargetType="grids:PropertyGridItem" BasedOn="{StaticResource TreeListViewItemContainerStyle}">
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="IsTabStop" Value="True" />
		<Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Once" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />

		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Stretch" />

		<Setter Property="GridLineBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumStartBackgroundNormalBrushKey}}" />
		<Setter Property="IndentIndicatorBackground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumStartBackgroundNormalBrushKey}}" />
		
		<Setter Property="ToggleExpansionButtonStyle">
			<Setter.Value>
				<Style TargetType="gridsPrimitives:TreeItemExpansionToggleButton" BasedOn="{StaticResource TreeItemExpansionToggleButtonStyle}">
					<Setter Property="Margin" Value="0,1,1,0" />
				</Style>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- PropertyGridCategoryItemContainerStyle -->
	<Style x:Key="PropertyGridCategoryItemContainerStyle" TargetType="grids:PropertyGridItem" BasedOn="{StaticResource PropertyGridItemBaseContainerStyle}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumStartBackgroundNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="FontWeight" Value="Bold" />
		<Setter Property="Padding" Value="5,3" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="grids:PropertyGridItem">
					<Border x:Name="gridLineBorder" BorderBrush="{TemplateBinding GridLineBrush}" BorderThickness="0,0,0,1" SnapsToDevicePixels="True">
						<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
							<gridsPrimitives:PropertyGridItemContentPanel>
								<gridsPrimitives:TreeItemExpansionToggleButton x:Name="PART_ExpanderButton" Style="{TemplateBinding ToggleExpansionButtonStyle}" 
									Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpandable, Converter={StaticResource BooleanToVisibilityConverter}}" 
									IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded, Mode=TwoWay}" 
									/>
									
								<Grid HorizontalAlignment="Left">
									<Rectangle x:Name="focusVisual" Margin="0,1" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" 
												StrokeDashArray="1 2" SnapsToDevicePixels="True" Visibility="Collapsed" />
									
									<TextBlock Margin="{TemplateBinding Padding}" Text="{Binding DisplayName}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
								</Grid>
							</gridsPrimitives:PropertyGridItemContentPanel>
						</Border>
					</Border>
					
					<ControlTemplate.Triggers>
						<Trigger Property="GridLineBrush" Value="{x:Null}">
							<Setter TargetName="gridLineBorder" Property="BorderThickness" Value="0" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true" />
								<Condition Property="grids:TreeListBox.IsSelectionActive" Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="focusVisual" Property="Visibility" Value="Visible" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- PropertyGridCategoryEditorItemContainerStyle -->
	<Style x:Key="PropertyGridCategoryEditorItemContainerStyle" TargetType="grids:PropertyGridItem" BasedOn="{StaticResource PropertyGridItemBaseContainerStyle}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumStartBackgroundNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="0" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Padding" Value="0" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="grids:PropertyGridItem">
					<Border x:Name="gridLineBorder" BorderBrush="{TemplateBinding GridLineBrush}" BorderThickness="0,0,0,1" SnapsToDevicePixels="True">
						<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
							<gridsPrimitives:PropertyGridItemContentPanel>
								<ContentPresenter />
							</gridsPrimitives:PropertyGridItemContentPanel>
						</Border>
					</Border>
					
					<ControlTemplate.Triggers>
						<Trigger Property="GridLineBrush" Value="{x:Null}">
							<Setter TargetName="gridLineBorder" Property="BorderThickness" Value="0" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- PropertyGridPropertyItemContainerStyle -->
	<Style x:Key="PropertyGridPropertyItemContainerStyle" TargetType="grids:PropertyGridItem" BasedOn="{StaticResource PropertyGridItemBaseContainerStyle}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="grids:PropertyGridItem">
					<Border x:Name="gridLineBorder" Background="Transparent" BorderBrush="{TemplateBinding GridLineBrush}" BorderThickness="0,0,0,1" SnapsToDevicePixels="True">
						<gridsPrimitives:PropertyGridItemRowPanel>
							<Rectangle x:Name="PART_IndentIndicator" Fill="{TemplateBinding IndentIndicatorBackground}" />
								
							<shared:ElementChrome x:Name="PART_Chrome" Background="{TemplateBinding Background}"
									BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundDisabledBrushKey}}"
									BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundHoverBrushKey}}"
									BackgroundFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundSelectedFocusedBrushKey}}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderDisabledBrushKey}}"
									BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderHoverBrushKey}}"
									BorderBrushFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderSelectedFocusedBrushKey}}"
									BorderThickness="{TemplateBinding BorderThickness}"
									InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderNormalBrushKey}}"
									InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderDisabledBrushKey}}"
									InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderHoverBrushKey}}"
									InnerBorderBrushFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderSelectedFocusedBrushKey}}"
									InnerBorderThickness="{TemplateBinding InnerBorderThickness}"
									CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}"
									SnapsToDevicePixels="True" />

							<gridsPrimitives:TreeItemExpansionToggleButton x:Name="PART_ExpanderButton" Style="{TemplateBinding ToggleExpansionButtonStyle}" 
								Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpandable, Converter={StaticResource BooleanToVisibilityConverter}}" 
								IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded, Mode=TwoWay}" 
								/>
						</gridsPrimitives:PropertyGridItemRowPanel>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="GridLineBrush" Value="{x:Null}">
							<Setter TargetName="gridLineBorder" Property="BorderThickness" Value="0" />
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundSelectedFocusedBrushKey}}" />
							<Setter TargetName="PART_Chrome" Property="State" Value="Focused" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="true" />
								<Condition Property="grids:TreeListBox.IsSelectionActive" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundSelectedNormalBrushKey}}" />
							<Setter TargetName="PART_Chrome" Property="BackgroundFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundSelectedNormalBrushKey}}" />
							<Setter TargetName="PART_Chrome" Property="BorderBrushFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderSelectedNormalBrushKey}}" />
							<Setter TargetName="PART_Chrome" Property="InnerBorderBrushFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderSelectedNormalBrushKey}}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="PART_Chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- grids:PropertyGridItem -->
	<Style x:Key="{x:Type grids:PropertyGridItem}" TargetType="grids:PropertyGridItem" BasedOn="{StaticResource PropertyGridPropertyItemContainerStyle }">
	</Style>
	
	<!-- grids:PropertyGrid -->
	<Style x:Key="{x:Type grids:PropertyGrid}" TargetType="grids:PropertyGrid" BasedOn="{StaticResource TreeListViewStyle}">
		<Setter Property="AreColumnHeadersVisible" Value="False" />
		<Setter Property="IndentIncrement" Value="14" />
		<Setter Property="IsRootItemVisible" Value="False" />
		<Setter Property="TopLevelIndent" Value="14" />

		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
		<Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Contained" />
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Local" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
		<Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Standard" />
		
		<Setter Property="ItemTemplateSelector">
			<Setter.Value>
				<grids:PropertyGridItemTemplateSelector />
			</Setter.Value>
		</Setter>
		
		<Setter Property="ItemContainerStyleSelector">
			<Setter.Value>
				<grids:PropertyGridItemStyleSelector />
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultCategoryItemContainerStyle" Value="{StaticResource PropertyGridCategoryItemContainerStyle}" />
		<Setter Property="DefaultCategoryEditorItemContainerStyle" Value="{StaticResource PropertyGridCategoryEditorItemContainerStyle}" />
		<Setter Property="DefaultPropertyItemContainerStyle" Value="{StaticResource PropertyGridPropertyItemContainerStyle}" />
		
		<Setter Property="NameContainerStyle">
			<Setter.Value>
				<Style TargetType="grids:TreeListViewItemCell">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="grids:TreeListViewItemCell">
								<Grid>
									<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
											Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
										<ContentPresenter Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IndentAmount, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left'}" />
									</Border>
									
									<gridsPrimitives:TreeListViewColumnResizeGripper x:Name="PART_ResizeGripper" Margin="0" Width="5" HorizontalAlignment="Right" 
										Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsResizeGripperEnabled, Converter={StaticResource BooleanToVisibilityConverter}}" />
								</Grid>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		
		<Setter Property="NameTemplateSelector">
			<Setter.Value>
				<grids:PropertyGridNameTemplateSelector />
			</Setter.Value>
		</Setter>
		
		<Setter Property="ValueContainerStyle">
			<Setter.Value>
				<Style TargetType="grids:TreeListViewItemCell">
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="grids:TreeListViewItemCell">
								<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
										SnapsToDevicePixels="true">
									<Grid>
										<Grid.ColumnDefinitions>
											<ColumnDefinition Width="*" />
											<ColumnDefinition Width="Auto" />
											<ColumnDefinition Width="Auto" />
										</Grid.ColumnDefinitions>
										
										<ContentPresenter Margin="{TemplateBinding Padding}" />
										
										<Button Grid.Column="1" CommandParameter="{Binding}" Command="{Binding AddChildCommand}"
												ToolTip="{products:SRExtension UIPropertyGridAddChildButtonToolTip}"
												Visibility="{Binding Path=CanAddChild, Converter={StaticResource BooleanToVisibilityConverter}}"
												Style="{StaticResource EmbeddedButtonStyle}">
											<Button.ContentTemplate>
												<DataTemplate>
													<Canvas Width="7" Height="7" Opacity="0.4">
														<Path Stroke="{Binding RelativeSource={RelativeSource Self}, Path=(TextElement.Foreground)}"
																Data="M 0,3.5 L 7,3.5 M 3.5,0 L 3.5,7" />
													</Canvas>
												</DataTemplate>
											</Button.ContentTemplate>
										</Button>
										
										<Button Grid.Column="2" CommandParameter="{Binding}" Command="{Binding RemoveCommand}"
												ToolTip="{products:SRExtension UIPropertyGridRemoveButtonToolTip}"
												Visibility="{Binding Path=CanRemove, Converter={StaticResource BooleanToVisibilityConverter}}"
												Style="{StaticResource EmbeddedButtonStyle}">
											<Button.ContentTemplate>
												<DataTemplate>
													<Canvas Width="7" Height="7" Opacity="0.4">
														<Path Canvas.Top="3" Stroke="{Binding RelativeSource={RelativeSource Self}, Path=(TextElement.Foreground)}"
																Data="M 0,0.5 L 7,0.5" />
													</Canvas>
												</DataTemplate>
											</Button.ContentTemplate>
										</Button>
									</Grid>
								</Border>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		
		<Setter Property="ValueTemplateSelector">
			<Setter.Value>
				<grids:PropertyGridValueTemplateSelector />
			</Setter.Value>
		</Setter>
		
		<Setter Property="SummaryTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						
						<TextBlock Text="{Binding DisplayName}" FontWeight="Bold" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap"
								   Visibility="{Binding DisplayName, Converter={StaticResource NonNullVisibilityConverter}}" />
						<TextBlock Text="{products:SRExtension UIPropertyGridSummaryNoDisplayNameText}" FontWeight="Bold" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap"
								   Visibility="{Binding DisplayName, Converter={StaticResource NullVisibilityConverter}}" />
						
						<TextBlock Grid.Row="1" Margin="0,2,0,0" Text="{Binding Description}" TextTrimming="CharacterEllipsis" TextWrapping="WrapWithOverflow"
								   Visibility="{Binding Description, Converter={StaticResource NonNullVisibilityConverter}}" />
						<TextBlock Grid.Row="1" Margin="0,2,0,0" FontStyle="Italic" Text="{products:SRExtension UIPropertyGridSummaryNoDescriptionText}" TextTrimming="CharacterEllipsis" TextWrapping="WrapWithOverflow"
								   Visibility="{Binding Description, Converter={StaticResource NullVisibilityConverter}}" />
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="DefaultBooleanValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<CheckBox Margin="5,3,0,3" IsChecked="{Binding Value, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True, Converter={StaticResource NoOpConverter}}" 
							  IsEnabled="{Binding IsReadOnly, Converter={StaticResource BooleanNotConverter}}" 
							  HorizontalAlignment="Left" VerticalAlignment="Center" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultBrushValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						
						<Grid Margin="5,3,0,3" Height="15" Width="15" Background="#ffffff" VerticalAlignment="Center">
							<Path Margin="1" Fill="#cccccc" Data="M4,0 L9,0 L9,4 L4,4 Z  M0,4 L4,4 L4,9 L0,9 Z  M9,4 L13,4 L13,9 L9,9 Z  M4,9 L9,9 L9,13 L4,13 Z" />
							
							<Border Background="{Binding Value}" 
									BorderThickness="1" BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderDisabledBrushKey}}" SnapsToDevicePixels="True" />
						</Grid>
								
						<shared:EmbeddedTextBox Grid.Column="1" Text="{Binding ValueAsString, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True, Converter={StaticResource NoOpConverter}}" 
												IsReadOnly="{Binding IsReadOnly}" />
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultColorValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
						
						<Grid Margin="5,3,0,3" Height="15" Width="15" Background="#ffffff" VerticalAlignment="Center">
							<Path Margin="1" Fill="#cccccc" Data="M4,0 L9,0 L9,4 L4,4 Z  M0,4 L4,4 L4,9 L0,9 Z  M9,4 L13,4 L13,9 L9,9 Z  M4,9 L9,9 L9,13 L4,13 Z" />
							
							<Border BorderThickness="1" BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderDisabledBrushKey}}" 
									Background="{Binding Value, Converter={StaticResource ColorToBrushConverter}}" SnapsToDevicePixels="True" />
						</Grid>
								
						<shared:EmbeddedTextBox Grid.Column="1" Text="{Binding ValueAsString, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True, Converter={StaticResource NoOpConverter}}" 
												IsReadOnly="{Binding IsReadOnly}" />
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultExtendedStringValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						
						<shared:EmbeddedTextBox x:Name="textBox" Text="{Binding ValueAsString, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True, Converter={StaticResource NoOpConverter}}" 
												IsReadOnly="{Binding IsReadOnly}" />
						<Button Grid.Column="1" Content="..." CommandParameter="{Binding}" Command="{Binding ValuePropertyEditor.ButtonCommand}"
								IsEnabled="{Binding IsReadOnly, Converter={StaticResource BooleanNotConverter}}"
								Style="{StaticResource EmbeddedButtonStyle}" />
					</Grid>
					
					<DataTemplate.Triggers>
						<DataTrigger Binding="{Binding IsHostReadOnly}" Value="True">
							<Setter TargetName="textBox" Property="IsReadOnly" Value="True" />
						</DataTrigger>
						<DataTrigger Binding="{Binding IsValueReadOnly}" Value="True">
							<Setter TargetName="textBox" Property="IsReadOnly" Value="True" />
						</DataTrigger>
						<DataTrigger Binding="{Binding ValuePropertyEditor.Behavior}" Value="TextReadOnly">
							<Setter TargetName="textBox" Property="IsReadOnly" Value="True" />
						</DataTrigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultFontFamilyValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<gridsPrimitives:FontFamilyComboBox SelectedItem="{Binding Value, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}"
														IsEditable="False" IsReadOnly="{Binding IsReadOnly}"
														Style="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedComboBoxStyleKey}}"
														/>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultFontStretchValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<ComboBox SelectedItem="{Binding Value, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}"
							  IsEditable="False" IsReadOnly="{Binding IsReadOnly}"
							  Style="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedComboBoxStyleKey}}"
							  >
						<FontStretch>UltraCondensed</FontStretch>
						<FontStretch>ExtraCondensed</FontStretch>
						<FontStretch>Condensed</FontStretch>
						<FontStretch>SemiCondensed</FontStretch>
						<FontStretch>Normal</FontStretch>
						<FontStretch>SemiExpanded</FontStretch>
						<FontStretch>Expanded</FontStretch>
						<FontStretch>ExtraExpanded</FontStretch>
						<FontStretch>UltraExpanded</FontStretch>
					</ComboBox>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultFontStyleValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<ComboBox SelectedItem="{Binding Value, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}"
							  IsEditable="False" IsReadOnly="{Binding IsReadOnly}"
							  Style="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedComboBoxStyleKey}}"
							  >
						<FontStyle>Normal</FontStyle>
						<FontStyle>Italic</FontStyle>
						<FontStyle>Oblique</FontStyle>
					</ComboBox>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultFontWeightValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<ComboBox SelectedItem="{Binding Value, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}"
							  IsEditable="False" IsReadOnly="{Binding IsReadOnly}"
							  Style="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedComboBoxStyleKey}}"
							  >
						<FontWeight>Thin</FontWeight>
						<FontWeight>UltraLight</FontWeight>
						<FontWeight>Light</FontWeight>
						<FontWeight>Normal</FontWeight>
						<FontWeight>Medium</FontWeight>
						<FontWeight>SemiBold</FontWeight>
						<FontWeight>Bold</FontWeight>
						<FontWeight>UltraBold</FontWeight>
						<FontWeight>Black</FontWeight>
						<FontWeight>UltraBlack</FontWeight>
					</ComboBox>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultLimitedObjectValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<ComboBox ItemsSource="{Binding StandardValues}" IsEditable="False" IsReadOnly="{Binding IsReadOnly}" DisplayMemberPath="{Binding StandardValuesDisplayMemberPath}"
							  SelectedItem="{Binding Value, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}"
							  Style="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedComboBoxStyleKey}}"
							  />
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultLimitedStringValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<ComboBox ItemsSource="{Binding StandardValuesAsStrings}" IsEditable="False" IsReadOnly="{Binding IsReadOnly}"
							  SelectedItem="{Binding ValueAsString, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}"
							  Style="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedComboBoxStyleKey}}"
							  />
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultNullableBooleanValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<CheckBox Margin="5,3,0,3" IsThreeState="True" IsChecked="{Binding Value, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True, Converter={StaticResource NoOpConverter}}" 
							  IsEnabled="{Binding IsReadOnly, Converter={StaticResource BooleanNotConverter}}" 
							  HorizontalAlignment="Left" VerticalAlignment="Center" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultStringNameTemplate">
			<Setter.Value>
				<DataTemplate>
					<shared:AdvancedTextBlock x:Name="textBlock" Margin="5,3,1,3" Text="{Binding DisplayName}" 
											  TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
					
					<DataTemplate.Triggers>
						<DataTrigger Binding="{Binding IsReadOnly}" Value="True">
							<Setter TargetName="textBlock" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
						</DataTrigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultStringValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<shared:EmbeddedTextBox Text="{Binding ValueAsString, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True, Converter={StaticResource NoOpConverter}}" 
											IsReadOnly="{Binding IsReadOnly}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="DefaultSuggestedStringValueTemplate">
			<Setter.Value>
				<DataTemplate>
					<ComboBox ItemsSource="{Binding StandardValuesAsStrings}" IsEditable="True" IsReadOnly="{Binding IsReadOnly}"
							  Text="{Binding ValueAsString, Mode=TwoWay, ValidatesOnExceptions=True, ValidatesOnDataErrors=True, NotifyOnValidationError=True}"
							  Style="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedComboBoxStyleKey}}"
							  />
				</DataTemplate>
			</Setter.Value>
		</Setter>
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="grids:PropertyGrid">
					<shared:ElementChrome x:Name="chrome" Background="{TemplateBinding Background}"
							BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListBackgroundDisabledBrushKey}}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderDisabledBrushKey}}"
							BorderThickness="{TemplateBinding BorderThickness}" 
							BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.ListElementChromeBorderStyleKey}}" SnapsToDevicePixels="true">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="*" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							
							<ScrollViewer x:Name="PART_ScrollViewer" Padding="{TemplateBinding Padding}" Focusable="False" Style="{StaticResource TreeListViewScrollViewerStyle}"
										  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
										  grids:TreeListView.ColumnHeaderVisibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=AreColumnHeadersVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
										  >
								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</ScrollViewer>
							
							<ContentPresenter x:Name="emptyContentPresenter" ContentTemplate="{TemplateBinding EmptyContentTemplate}" Content="{TemplateBinding EmptyContent}" Visibility="Collapsed" />
							
							<gridsPrimitives:PropertyGridSummaryContentControl x:Name="summary" Grid.Row="1" Content="{TemplateBinding SelectedItem}"
								ContentTemplate="{TemplateBinding SummaryTemplate}" ContentTemplateSelector="{TemplateBinding SummaryTemplateSelector}"
								Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsSummaryVisible, Converter={StaticResource BooleanToVisibilityConverter}}"
								IsResizable="{TemplateBinding IsSummaryResizable}" CanAutoSize="{TemplateBinding CanSummaryAutoSize}"
								Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=SummaryHeight, Mode=TwoWay}"
								/>
						</Grid>
					</shared:ElementChrome>

					<ControlTemplate.Triggers>
						<Trigger Property="IsEmpty" Value="True">
							<Setter TargetName="emptyContentPresenter" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
						<Trigger Property="SelectedItem" Value="{x:Null}">
							<Setter TargetName="summary" Property="Visibility" Value="Collapsed" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- gridsPrimitives:PropertyGridSummaryContentControl -->
	<Style x:Key="{x:Type gridsPrimitives:PropertyGridSummaryContentControl}" TargetType="gridsPrimitives:PropertyGridSummaryContentControl">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerDarkStartBackgroundNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="0,1,0,0" />
		<Setter Property="Padding" Value="7" />
		
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="MinHeight" Value="7" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="gridsPrimitives:PropertyGridSummaryContentControl">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<Grid>
							<ScrollViewer Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding, Converter={StaticResource ThicknessConverter}, ConverterParameter='Top'}"
										  HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
								<ContentPresenter x:Name="PART_Presenter" 
												  Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Padding, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left,Right,Bottom'}"
												  Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" 
												  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
							</ScrollViewer>

							<Border x:Name="PART_Gripper" Height="6" Background="Transparent" VerticalAlignment="Top" Cursor="SizeNS"
								   Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsResizable, Converter={StaticResource BooleanToVisibilityConverter}}" />
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		
	</Style>
	
</ResourceDictionary>