<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:propgrid="clr-namespace:ActiproSoftware.Windows.Controls.PropertyGrid;assembly=ActiproSoftware.PropertyGrid.Wpf"
		xmlns:propgridPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.PropertyGrid.Primitives;assembly=ActiproSoftware.PropertyGrid.Wpf"
		xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
		xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
		>

	<!-- Converters -->
	<shared:ThicknessConverter x:Key="ThicknessConverter" />

	<!-- propgridPrimitives:TreeListViewToggleButton -->
	<Style x:Key="{x:Type propgridPrimitives:TreeListViewToggleButton}" TargetType="{x:Type propgridPrimitives:TreeListViewToggleButton}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBorderNormalBrushKey}}" />
		<Setter Property="CategoryBackground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumEndBackgroundNormalBrushKey}}" />

		<Setter Property="Focusable" Value="False" />
		<Setter Property="SnapsToDevicePixels" Value="True" />

		<!-- Bind IsChecked to the IsExanded of the parent item -->
		<Setter Property="IsChecked"
				Value="{Binding Path=IsExpanded, RelativeSource={RelativeSource AncestorType={x:Type propgrid:TreeListViewItem}}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type propgridPrimitives:TreeListViewToggleButton}">
					<shared:PixelSnapper VerticalRoundMode="CeilingToEven">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							<Border x:Name="categoryBorder" Width="0" Background="{TemplateBinding CategoryBackground}" />
							<Border Grid.Column="1" Width="{TemplateBinding IndentationIncrement}" HorizontalAlignment="Left"
									Background="{TemplateBinding CategoryBackground}" />
							<Border x:Name="border" Grid.Column="1" HorizontalAlignment="Right" Width="{TemplateBinding IndentationIncrement}" MinHeight="16"
									Background="Transparent" SnapsToDevicePixels="true">
								<Path x:Name="path" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" Data="M 2.5,1.5 L 2.5,9.5 L 7.5,5.5 Z"
										Width="10" Height="10" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Border>
						</Grid>
					</shared:PixelSnapper>

					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBackgroundHoverBrushKey}}" />
							<Setter Property="BorderBrush"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBorderHoverBrushKey}}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="path" Property="Data" Value="M 1.5,7.5 L 6.5,7.5 L 6.5,2.5 Z" />
							<Setter Property="Background"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBackgroundCheckedBrushKey}}" />
							<Setter Property="BorderBrush"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListToggleButtonExpansionBorderCheckedBrushKey}}" />
						</Trigger>

						<!-- Indent the control based on the indentation widths of its parent item -->
						<Trigger Property="IsAutoIndentationEnabled" Value="True">
							<Setter TargetName="categoryBorder" Property="Width"
									Value="{Binding CategoryIndentationWidth, RelativeSource={RelativeSource AncestorType={x:Type propgrid:TreeListViewItem}}}" />
							<Setter TargetName="border" Property="Margin"
									Value="{Binding IndentationWidth, RelativeSource={RelativeSource AncestorType={x:Type propgrid:TreeListViewItem}}, Converter={StaticResource ThicknessConverter}, ConverterParameter=Left}" />
						</Trigger>

						<!-- Hide the control if the parent item does not have any items -->
						<DataTrigger Binding="{Binding HasItems, RelativeSource={RelativeSource AncestorType={x:Type propgrid:TreeListViewItem}}}" Value="False">
							<Setter TargetName="path" Property="Visibility" Value="Hidden" />
						</DataTrigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

	</Style>

</ResourceDictionary>