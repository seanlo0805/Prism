<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
		xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
		xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
		xmlns:propgrid="clr-namespace:ActiproSoftware.Windows.Controls.PropertyGrid;assembly=ActiproSoftware.PropertyGrid.Wpf"
		xmlns:propgridPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.PropertyGrid.Primitives;assembly=ActiproSoftware.PropertyGrid.Wpf"
		xmlns:propgridThemes="clr-namespace:ActiproSoftware.Windows.Themes;assembly=ActiproSoftware.PropertyGrid.Wpf"
		xmlns:productsPropertyGrid="clr-namespace:ActiproSoftware.Products.PropertyGrid;assembly=ActiproSoftware.PropertyGrid.Wpf"
		>

	<!-- Converters -->
	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
	<shared:MultiplicationConverter x:Key="MultiplicationConverter" />

	<!--
	
	BRUSHES
	
	-->
	
	<DrawingBrush x:Key="{x:Static propgridThemes:PropertyGridResourceKeys.AddPropertyChildNormalBrushKey}" PresentationOptions:Freeze="True" Stretch="Uniform">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<DrawingGroup.Children>
					<GeometryDrawing Brush="#FFFFFFFF"
							Geometry="F1 M 300,25.0001C 451.878,25.0001 575,148.122 575,300C 575,451.878 451.878,575 300,575C 148.122,575 25,451.878 25,300C 25,148.122 148.122,25.0001 300,25.0001 Z ">
						<GeometryDrawing.Pen>
							<Pen Thickness="50" MiterLimit="2.75" Brush="#FFB0B0B0" />
						</GeometryDrawing.Pen>
					</GeometryDrawing>
					<GeometryDrawing Brush="#FFB0B0B0"
							Geometry="F1 M 150,350L 150,250L 250,250L 250,150L 350,150L 350,250L 450,250L 450,350L 350,350L 350,450L 250,450L 250,350L 150,350 Z " />
				</DrawingGroup.Children>
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>
	<DrawingBrush x:Key="{x:Static propgridThemes:PropertyGridResourceKeys.AddPropertyChildHoverBrushKey}" PresentationOptions:Freeze="True" Stretch="Uniform">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<DrawingGroup.Children>
					<GeometryDrawing
							Geometry="F1 M 300,25.0001C 451.878,25.0001 575,148.122 575,300C 575,451.878 451.878,575 300,575C 148.122,575 25,451.878 25,300C 25,148.122 148.122,25.0001 300,25.0001 Z ">
						<GeometryDrawing.Pen>
							<Pen Thickness="50" MiterLimit="2.75" Brush="#FF062C0A" />
						</GeometryDrawing.Pen>
						<GeometryDrawing.Brush>
							<RadialGradientBrush RadiusX="0.5" RadiusY="0.5" Center="0.5,0.5" GradientOrigin="0.5,0.5">
								<RadialGradientBrush.GradientStops>
									<GradientStop Color="#FF41903D" Offset="0.552511" />
									<GradientStop Color="#FF1C6523" Offset="0.868644" />
									<GradientStop Color="#FF031D10" Offset="1" />
								</RadialGradientBrush.GradientStops>
							</RadialGradientBrush>
						</GeometryDrawing.Brush>
					</GeometryDrawing>
					<GeometryDrawing Brush="#FFFFFFFF"
							Geometry="F1 M 150,350L 150,250L 250,250L 250,150L 350,150L 350,250L 450,250L 450,350L 350,350L 350,450L 250,450L 250,350L 150,350 Z " />
				</DrawingGroup.Children>
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>
	<DrawingBrush x:Key="{x:Static propgridThemes:PropertyGridResourceKeys.RemovePropertyChildNormalBrushKey}" PresentationOptions:Freeze="True" Stretch="Uniform">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<DrawingGroup.Children>
					<GeometryDrawing Brush="#FFFFFFFF"
							Geometry="F1 M 300,25.0001C 451.878,25.0001 575,148.122 575,300C 575,451.878 451.878,575 300,575C 148.122,575 25,451.878 25,300C 25,148.122 148.122,25.0001 300,25.0001 Z ">
						<GeometryDrawing.Pen>
							<Pen Thickness="50" MiterLimit="2.75" Brush="#FFB0B0B0" />
						</GeometryDrawing.Pen>
					</GeometryDrawing>
					<GeometryDrawing Brush="#FFB0B0B0"
							Geometry="F1 M 300,350L 150,350L 150,250L 300,250L 450,250L 450,350L 300,350 Z " />
				</DrawingGroup.Children>
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>
	<DrawingBrush x:Key="{x:Static propgridThemes:PropertyGridResourceKeys.RemovePropertyChildHoverBrushKey}" PresentationOptions:Freeze="True" Stretch="Uniform">
		<DrawingBrush.Drawing>
			<DrawingGroup>
				<DrawingGroup.Children>
					<GeometryDrawing
							Geometry="F1 M 300,25.0001C 451.878,25.0001 575,148.122 575,300C 575,451.878 451.878,575 300,575C 148.122,575 25,451.878 25,300C 25,148.122 148.122,25.0001 300,25.0001 Z ">
						<GeometryDrawing.Pen>
							<Pen Thickness="50" MiterLimit="2.75" Brush="#FF2C0606" />
						</GeometryDrawing.Pen>
						<GeometryDrawing.Brush>
							<RadialGradientBrush RadiusX="0.5" RadiusY="0.5" Center="0.5,0.5" GradientOrigin="0.5,0.5">
								<RadialGradientBrush.GradientStops>
									<GradientStop Color="#FFEB5F5F" Offset="0.552511" />
									<GradientStop Color="#FF982A2A" Offset="0.868644" />
									<GradientStop Color="#FF4E0606" Offset="1" />
								</RadialGradientBrush.GradientStops>
							</RadialGradientBrush>
						</GeometryDrawing.Brush>
					</GeometryDrawing>
					<GeometryDrawing Brush="#FFFFFFFF"
							Geometry="F1 M 300,350L 150,350L 150,250L 300,250L 450,250L 450,350L 300,350 Z " />
				</DrawingGroup.Children>
			</DrawingGroup>
		</DrawingBrush.Drawing>
	</DrawingBrush>

	<!--
	
	STYLES
	
	-->

	<!-- TreeListViewSplitterStyleKey -->
	<Style x:Key="TreeListViewSplitterStyleKey" TargetType="{x:Type propgridPrimitives:TreeListViewSplitter}">
		<Setter Property="Background"
				Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumEndBackgroundNormalBrushKey}}" />
	</Style>

	<!-- propgridThemes:PropertyGridResourceKeys.NameCellContainerStyleKey -->
	<Style x:Key="{x:Static propgridThemes:PropertyGridResourceKeys.NameCellContainerStyleKey}" TargetType="{x:Type propgridPrimitives:TreeListViewCell}">
		<Setter Property="Background" Value="Transparent" />

		<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderNormalCornerRadiusKey}}" />
		<Setter Property="themes:ThemeProperties.IsGlassEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListIsGlassEnabledBooleanKey}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="propgridPrimitives:TreeListViewCell">
					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true"
							Padding="{TemplateBinding Padding}">
						<DockPanel LastChildFill="True" MinHeight="20">
							<propgridPrimitives:TreeListViewToggleButton DockPanel.Dock="Left"
									IndentationIncrement="{TemplateBinding IndentationIncrement}"
									Visibility="{TemplateBinding IsExpanderVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
							<shared:ElementChrome x:Name="chrome" Margin="0,0,2,0"
									Background="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundNormalBrushKey}}"
									BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundDisabledBrushKey}}"
									BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundHoverBrushKey}}"
									BackgroundFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundSelectedFocusedBrushKey}}"
									BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderNormalBrushKey}}"
									BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderDisabledBrushKey}}"
									BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderHoverBrushKey}}"
									BorderBrushFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderSelectedFocusedBrushKey}}"
									BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderNormalThicknessKey}}"
									InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderNormalBrushKey}}"
									InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderDisabledBrushKey}}"
									InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderHoverBrushKey}}"
									InnerBorderBrushFocused="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderSelectedFocusedBrushKey}}"
									InnerBorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderNormalThicknessKey}}"
									CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" IsAnimationEnabled="False" SnapsToDevicePixels="true">
								<Grid>
									<Grid.RowDefinitions>
										<RowDefinition MaxHeight="11" />
										<RowDefinition />
									</Grid.RowDefinitions>
									<Rectangle x:Name="highlight"
											Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ThemeProperties.IsGlassEnabled), Converter={StaticResource BooleanToVisibilityConverter}}" />
									<ContentPresenter Grid.RowSpan="2" Margin="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</Grid>
							</shared:ElementChrome>
						</DockPanel>
					</Border>

					<ControlTemplate.Triggers>
						<!-- Set the font weight to Bold when the property is modified and the user wants the value cell to be bold -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
										Binding="{Binding IsModified, RelativeSource={RelativeSource AncestorType={x:Type propgridPrimitives:IPropertyDataAccessor}}}"
										Value="True" />
								<Condition
										Binding="{Binding ModifiedPropertyDisplayMode, RelativeSource={RelativeSource AncestorType={x:Type propgrid:PropertyGrid}}}"
										Value="BoldName" />
							</MultiDataTrigger.Conditions>
							<Setter Property="FontWeight" Value="Bold" />
						</MultiDataTrigger>

						<!-- Set the font style to Italic when the property is modified and the user wants the value cell to be italic -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
										Binding="{Binding IsModified, RelativeSource={RelativeSource AncestorType={x:Type propgridPrimitives:IPropertyDataAccessor}}}"
										Value="True" />
								<Condition
										Binding="{Binding ModifiedPropertyDisplayMode, RelativeSource={RelativeSource AncestorType={x:Type propgrid:PropertyGrid}}}"
										Value="ItalicName" />
							</MultiDataTrigger.Conditions>
							<Setter Property="FontStyle" Value="Italic" />
						</MultiDataTrigger>

						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=chrome}" Value="true" />
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type propgridPrimitives:PropertyGridDataAccessorItem}}}" Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="chrome" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Hover" />
							<Setter TargetName="highlight" Property="Fill" Value="#75FFFFFF" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=chrome}" Value="true" />
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type propgridPrimitives:PropertyGridDataAccessorItem}}}" Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="chrome" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="BackgroundHover" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="BorderBrushHover" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="InnerBorderBrushHover" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderSelectedHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Hover" />
							<Setter TargetName="highlight" Property="Fill" Value="#75FFFFFF" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsMouseOver, ElementName=chrome}" Value="false" />
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type propgridPrimitives:PropertyGridDataAccessorItem}}}" Value="true" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="chrome" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundSelectedFocusedBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Focused" />
							<Setter TargetName="highlight" Property="Fill" Value="#40FFFFFF" />
						</MultiDataTrigger>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type propgridPrimitives:PropertyGridDataAccessorItem}}}" Value="true" />
								<Condition Binding="{Binding IsKeyboardFocusWithinHeader, RelativeSource={RelativeSource AncestorType={x:Type propgridPrimitives:PropertyGridDataAccessorItem}}}" Value="false" />
							</MultiDataTrigger.Conditions>
							<Setter TargetName="chrome" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemForegroundSelectedNormalBrushKey}}" />
							<Setter TargetName="chrome" Property="BackgroundFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBackgroundSelectedNormalBrushKey}}" />
							<Setter TargetName="chrome" Property="BorderBrushFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemBorderSelectedNormalBrushKey}}" />
							<Setter TargetName="chrome" Property="InnerBorderBrushFocused" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListItemInnerBorderSelectedNormalBrushKey}}" />
						</MultiDataTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
							<Setter TargetName="highlight" Property="Fill" Value="{x:Null}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- propgridThemes:PropertyGridResourceKeys.ValueCellContainerStyleKey -->
	<Style x:Key="{x:Static propgridThemes:PropertyGridResourceKeys.ValueCellContainerStyleKey}" TargetType="{x:Type propgridPrimitives:TreeListViewCell}">
		<Setter Property="Background" Value="Transparent" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type propgridPrimitives:TreeListViewCell}">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true"
							Padding="{TemplateBinding Padding}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*" />
								<ColumnDefinition Width="Auto" />
							</Grid.ColumnDefinitions>
							
							<shared:PixelSnapper>
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</shared:PixelSnapper>
							<StackPanel x:Name="inlineButtons" Grid.Column="1" Orientation="Horizontal" Visibility="Collapsed">
								<Button x:Name="addChildButton" Padding="2"
										Style="{DynamicResource {x:Static themes:SharedResourceKeys.EmbeddedButtonBaseStyleKey}}"
										Command="{x:Static propgrid:PropertyGrid.AddPropertyChildCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type propgridPrimitives:IPropertyDataAccessor}}}"
										ToolTip="{productsPropertyGrid:SRExtension UIPropertyGridAddPropertyChildToolTip}"
										Visibility="{Binding CommandParameter.CanAddChild, RelativeSource={RelativeSource Self}, Converter={StaticResource BooleanToVisibilityConverter}}">
									<Rectangle x:Name="addChildRectangle" Height="12" Width="12"
											Fill="{DynamicResource {x:Static propgridThemes:PropertyGridResourceKeys.AddPropertyChildNormalBrushKey}}" />
								</Button>
								<Button x:Name="removeButton" Padding="2"
										Style="{DynamicResource {x:Static themes:SharedResourceKeys.EmbeddedButtonBaseStyleKey}}"
										Command="{x:Static propgrid:PropertyGrid.RemovePropertyChildCommand}"
										CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type propgridPrimitives:IPropertyDataAccessor}}}"
										ToolTip="{productsPropertyGrid:SRExtension UIPropertyGridRemovePropertyChildToolTip}"
										Visibility="{Binding CommandParameter.CanRemove, RelativeSource={RelativeSource Self}, Converter={StaticResource BooleanToVisibilityConverter}}">
									<Rectangle x:Name="removeRectangle" Height="12" Width="12"
											Fill="{DynamicResource {x:Static propgridThemes:PropertyGridResourceKeys.RemovePropertyChildNormalBrushKey}}" />
								</Button>
							</StackPanel>
						</Grid>
					</Border>

					<ControlTemplate.Triggers>

						<!-- Set the font weight to Bold when the property is modified and the user wants the value cell to be bold -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
										Binding="{Binding IsModified, RelativeSource={RelativeSource AncestorType={x:Type propgridPrimitives:IPropertyDataAccessor}}}"
										Value="True" />
								<Condition
										Binding="{Binding ModifiedPropertyDisplayMode, RelativeSource={RelativeSource AncestorType={x:Type propgrid:PropertyGrid}}}"
										Value="BoldValue" />
							</MultiDataTrigger.Conditions>
							<Setter Property="FontWeight" Value="Bold" />
						</MultiDataTrigger>

						<!-- Set the font style to Italic when the property is modified and the user wants the value cell to be italic -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
										Binding="{Binding IsModified, RelativeSource={RelativeSource AncestorType={x:Type propgridPrimitives:IPropertyDataAccessor}}}"
										Value="True" />
								<Condition
										Binding="{Binding ModifiedPropertyDisplayMode, RelativeSource={RelativeSource AncestorType={x:Type propgrid:PropertyGrid}}}"
										Value="ItalicValue" />
							</MultiDataTrigger.Conditions>
							<Setter Property="FontStyle" Value="Italic" />
						</MultiDataTrigger>

						<!-- This trigger will show the inline buttons, when appropriate. -->
						<Trigger Property="propgrid:PropertyGrid.CollectionDisplayMode" Value="EditableInline">
							<Setter TargetName="inlineButtons" Property="Visibility" Value="Visible" />
						</Trigger>

						<!-- This trigger will highlight the add-child button when the mouse is hovering. -->
						<Trigger SourceName="addChildButton" Property="IsMouseOver" Value="True">
							<Setter TargetName="addChildRectangle" Property="Fill"
									Value="{DynamicResource {x:Static propgridThemes:PropertyGridResourceKeys.AddPropertyChildHoverBrushKey}}" />
						</Trigger>
						
						<!-- This trigger will highlight the remove button when the mouse is hovering. -->
						<Trigger SourceName="removeButton" Property="IsMouseOver" Value="True">
							<Setter TargetName="removeRectangle" Property="Fill"
									Value="{DynamicResource {x:Static propgridThemes:PropertyGridResourceKeys.RemovePropertyChildHoverBrushKey}}" />
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- propgridPrimitives:PropertyGridDataAccessorItem -->
	<Style x:Key="{x:Type propgridPrimitives:PropertyGridDataAccessorItem}" TargetType="{x:Type propgridPrimitives:PropertyGridDataAccessorItem}">

		<Setter Property="Header" Value="{Binding DisplayName, RelativeSource={RelativeSource Self}}" />

		<Setter Property="FocusVisualStyle" Value="{x:Null}" />

		<Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
		<Setter Property="KeyboardNavigation.ControlTabNavigation" Value="Continue" />
		<Setter Property="KeyboardNavigation.DirectionalNavigation" Value="None" />

		<Setter Property="CategoryIndentationWidth">
			<Setter.Value>
				<MultiBinding Converter="{StaticResource MultiplicationConverter}">
					<Binding Path="IndentationIncrement" RelativeSource="{RelativeSource Mode=Self}" />
					<Binding Path="CategoryDepth" RelativeSource="{RelativeSource Mode=Self}" />
				</MultiBinding>
			</Setter.Value>
		</Setter>
		<Setter Property="IndentationWidth">
			<Setter.Value>
				<MultiBinding Converter="{StaticResource MultiplicationConverter}">
					<Binding Path="IndentationIncrement" RelativeSource="{RelativeSource Mode=Self}" />
					<Binding Path="Depth" RelativeSource="{RelativeSource Mode=Self}" />
				</MultiBinding>
			</Setter.Value>
		</Setter>

		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />

		<Style.Triggers>

			<!-- Set properties for Category accessors -->
			<Trigger Property="DataAccessorType" Value="Category">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumBackgroundNormalBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumEndBackgroundNormalBrushKey}}" />
				<!-- 2/10/2011 - Changed from 0,0,1,1 to ensure all property rows are given the same width regardless of their level (0F3-14E3E3EE-66E3) -->
				<Setter Property="BorderThickness" Value="0,0,0,1" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />

				<Setter Property="HeaderTemplate">
					<Setter.Value>
						<DataTemplate>
							<TextBlock Text="{Binding}" />
						</DataTemplate>
					</Setter.Value>
				</Setter>

				<Setter Property="IsExpanded" Value="{Binding Path=(propgrid:PropertyGrid.AreCategoriesAutoExpanded), RelativeSource={RelativeSource Self}, Mode=OneTime}" />

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type propgridPrimitives:PropertyGridDataAccessorItem}">
							<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true"
									Padding="{TemplateBinding Padding}">
								<StackPanel>
									<Border x:Name="PART_HeaderContainer" MinHeight="20"
											Background="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumBackgroundNormalBrushKey}}">
										<StackPanel Orientation="Horizontal">
											<propgridPrimitives:TreeListViewToggleButton CategoryBackground="Transparent"
													IndentationIncrement="{TemplateBinding IndentationIncrement}" />
											<Grid>
												<shared:PixelSnapper>
													<ContentPresenter x:Name="PART_Header" Margin="4,0,4,1"
															HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
															VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Header}"
															ContentTemplate="{TemplateBinding HeaderTemplate}" TextBlock.FontWeight="Bold" />
												</shared:PixelSnapper>
												<Rectangle x:Name="FocusRectangle" StrokeThickness="1" Stroke="Black"
														StrokeDashArray="1 2" SnapsToDevicePixels="true" />
											</Grid>
										</StackPanel>
									</Border>
									<shared:AnimatedExpanderDecorator x:Name="animatedExpanderDecorator"
											IsExpanded="{TemplateBinding IsExpanded}" CollapsedVisibility="{TemplateBinding CollapsedVisibility}"
											CollapseDuration="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ExpanderThemeProperties.CollapseDuration)}"
											ExpandDuration="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ExpanderThemeProperties.ExpandDuration)}">
										<ItemsPresenter />
									</shared:AnimatedExpanderDecorator>
								</StackPanel>
							</Border>

							<ControlTemplate.Triggers>
								<Trigger Property="IsKeyboardFocusWithinHeader" Value="false">
									<Setter TargetName="FocusRectangle" Property="Visibility" Value="Hidden" />
								</Trigger>
								<Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
									<Setter TargetName="animatedExpanderDecorator" Property="CollapseDuration" Value="0" />
									<Setter TargetName="animatedExpanderDecorator" Property="ExpandDuration" Value="0" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>

			<!-- Set properties for Category Editor accessors -->
			<Trigger Property="DataAccessorType" Value="CategoryEditor">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumBackgroundNormalBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumEndBackgroundNormalBrushKey}}" />
				<Setter Property="BorderThickness" Value="0,0,1,1" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />

				<Setter Property="HeaderTemplate" Value="{Binding EditorTemplate, RelativeSource={RelativeSource Self}}" />

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type propgridPrimitives:PropertyGridDataAccessorItem}">
							<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true"
									Padding="{TemplateBinding Padding}">
								<Grid x:Name="PART_HeaderContainer">
									<Grid.ColumnDefinitions>
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<propgridPrimitives:TreeListViewToggleButton IndentationIncrement="{TemplateBinding IndentationIncrement}" />
									<shared:PixelSnapper Grid.Column="1">
										<ContentPresenter x:Name="PART_Header" Margin="4,0,0,1"
												HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
												Content="{TemplateBinding Header}"
												ContentTemplate="{TemplateBinding HeaderTemplate}" />
									</shared:PixelSnapper>
								</Grid>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>

			<!-- Set properties for Property accessors -->
			<Trigger Property="DataAccessorType" Value="Property">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListBackgroundNormalBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumEndBackgroundNormalBrushKey}}" />
				<Setter Property="BorderThickness" Value="0,0,0,1" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />

				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type propgridPrimitives:PropertyGridDataAccessorItem}">
							<StackPanel>
								<Border x:Name="PART_HeaderContainer" Background="{TemplateBinding Background}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
										SnapsToDevicePixels="true">
									<!-- 3/27/2012 - Changed two TemplateBindings to Bindings below due to issue with using control in WinForms application (1FF-17044B1E-0302) -->
									<propgridPrimitives:TreeListViewRowPresenter x:Name="PART_Header" Background="Transparent"
											Columns="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Columns}"
											Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Header}"
											IndentationIncrement="{TemplateBinding IndentationIncrement}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
											SplitterStyle="{TemplateBinding SplitterStyle}" />
								</Border>
								<shared:AnimatedExpanderDecorator x:Name="animatedExpanderDecorator"
										IsExpanded="{TemplateBinding IsExpanded}" CollapsedVisibility="{TemplateBinding CollapsedVisibility}"
										CollapseDuration="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ExpanderThemeProperties.CollapseDuration)}"
										ExpandDuration="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ExpanderThemeProperties.ExpandDuration)}">
									<ItemsPresenter />
								</shared:AnimatedExpanderDecorator>
							</StackPanel>

							<ControlTemplate.Triggers>
								<Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
									<Setter TargetName="animatedExpanderDecorator" Property="CollapseDuration" Value="0" />
									<Setter TargetName="animatedExpanderDecorator" Property="ExpandDuration" Value="0" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				
			</Trigger>
			
			<!-- If the control is read-only, then change the foreground color. -->
			<MultiDataTrigger>
				<MultiDataTrigger.Conditions>
					<Condition Binding="{Binding DataAccessorType, RelativeSource={RelativeSource Self}}" Value="Property" />
					<Condition Binding="{Binding IsReadOnly, RelativeSource={RelativeSource Self}}" Value="True" />
				</MultiDataTrigger.Conditions>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
			</MultiDataTrigger>

			<!-- When virtualizing, the ItemsPanel needs to be updated. -->
			<Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel />
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>

		</Style.Triggers>
	</Style>
	
	<!-- propgridThemes:PropertyGridResourceKeys.SummarySplitterThumbStyleKey -->
	<Style x:Key="{x:Static propgridThemes:PropertyGridResourceKeys.SummarySplitterThumbStyleKey}" TargetType="{x:Type Thumb}">
		<Setter Property="Cursor" Value="SizeNS" />

		<Setter Property="MinHeight" Value="3" />
		<Setter Property="HorizontalAlignment" Value="Stretch" />
		<Setter Property="VerticalAlignment" Value="Stretch" />

		<Setter Property="SnapsToDevicePixels" Value="True" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Thumb}">
					<Border Background="{TemplateBinding Background}" SnapsToDevicePixels="True" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- propgridPrimitives:PropertyGridSummaryContentControl -->
	<Style x:Key="{x:Type propgridPrimitives:PropertyGridSummaryContentControl}" TargetType="{x:Type propgridPrimitives:PropertyGridSummaryContentControl}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerDarkBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ContainerMediumEndBackgroundNormalBrushKey}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type propgridPrimitives:PropertyGridSummaryContentControl}">
					<Border Background="{TemplateBinding Background}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>
							<Border x:Name="gripperBorder" BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="0,1,0,0" SnapsToDevicePixels="true"
									Visibility="{Binding IsResizable, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}">
								<Thumb x:Name="PART_Gripper" Background="{TemplateBinding Background}"
										Style="{DynamicResource {x:Static propgridThemes:PropertyGridResourceKeys.SummarySplitterThumbStyleKey}}" />
							</Border>
							<Border x:Name="presenterBorder" Grid.Row="1" Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,1,0,0"
									SnapsToDevicePixels="true" />
							<shared:TransitionPresenter x:Name="PART_Presenter" Grid.Row="2" Content="{TemplateBinding Content}"
									ContentTemplate="{TemplateBinding ContentTemplate}"
									ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
									DefaultDuration="{Binding SummaryTransitionDuration, RelativeSource={RelativeSource AncestorType={x:Type propgrid:PropertyGrid}}}"
									TransitionSelector="{Binding SummaryTransitionSelector, RelativeSource={RelativeSource AncestorType={x:Type propgrid:PropertyGrid}}}" />
						</Grid>
					</Border>
					
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Height" Value="Auto" />
								<Condition SourceName="PART_Presenter" Property="ActualHeight" Value="0" />
							</MultiTrigger.Conditions>
							<Setter TargetName="presenterBorder" Property="Visibility" Value="Collapsed" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- propgrid:PropertyGrid -->
	<Style x:Key="{x:Type propgrid:PropertyGrid}" TargetType="{x:Type propgrid:PropertyGrid}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />

		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.PanningMode" Value="Both" />
		<Setter Property="Stylus.IsFlicksEnabled" Value="False" />

		<Setter Property="Padding" Value="0" />
		<Setter Property="VerticalContentAlignment" Value="Center" />

		<Setter Property="Focusable" Value="true" />

		<Setter Property="IsHeaderVisible" Value="false" />
		<Setter Property="IndentationIncrement" Value="14.0" />

		<Setter Property="NameCellContainerStyle" Value="{DynamicResource {x:Static propgridThemes:PropertyGridResourceKeys.NameCellContainerStyleKey}}" />
		<Setter Property="SplitterStyle" Value="{StaticResource TreeListViewSplitterStyleKey}" />
		<Setter Property="ValueCellContainerStyle" Value="{DynamicResource {x:Static propgridThemes:PropertyGridResourceKeys.ValueCellContainerStyleKey}}" />

		<!-- By default VirtualizingStackPanel.IsVirtualizing is true. When running on a pre-.Net 3.5 SP1 platform, the trees
		       did not have virtualization support. So we will disable this by default, so that we will work correctly on
		       pre-.Net 3.5 SP1 platforms. -->
		<Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="false" />

		<!-- For keyboard navigation, we want Tab and Ctrl+Tab to move to the next/previous control immediately. We only want the
		       directional keys to be used to cycle through the focusable elements. -->
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Continue" />
		<Setter Property="KeyboardNavigation.ControlTabNavigation" Value="Continue" />
		<Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle" />

		<Setter Property="SummaryTemplate">
			<Setter.Value>
				<DataTemplate>
					<Border x:Name="border">
						<ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
							<Grid Margin="5">
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition Height="Auto" />
								</Grid.RowDefinitions>
								<TextBlock x:Name="displayNameTextBox" FontWeight="Bold" Text="{Binding DisplayName}"
										TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" />
								<TextBlock x:Name="noDisplayNameTextBox" FontWeight="Bold"
										Text="{productsPropertyGrid:SRExtension UIPropertyGridSummaryNoDisplayNameText}"
										TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Visibility="Collapsed" />
								<TextBlock x:Name="descriptionTextBox" Grid.Row="1" Margin="0,3,0,0" Text="{Binding Description}"
										TextTrimming="CharacterEllipsis" TextWrapping="WrapWithOverflow" />
								<TextBlock x:Name="noDescriptionTextBox" Grid.Row="1" Margin="0,3,0,0"
										Text="{productsPropertyGrid:SRExtension UIPropertyGridSummaryNoDescriptionText}"
										TextTrimming="CharacterEllipsis" TextWrapping="WrapWithOverflow" Visibility="Collapsed"
										FontStyle="Italic" />
							</Grid>
						</ScrollViewer>
					</Border>

					<DataTemplate.Triggers>
						<DataTrigger Binding="{Binding}" Value="{x:Null}">
							<Setter TargetName="border" Property="Visibility" Value="Collapsed" />
						</DataTrigger>
						<DataTrigger Binding="{Binding Text, ElementName=displayNameTextBox}" Value="">
							<Setter TargetName="displayNameTextBox" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="noDisplayNameTextBox" Property="Visibility" Value="Visible" />
						</DataTrigger>
						<DataTrigger Binding="{Binding Text, ElementName=descriptionTextBox}" Value="">
							<Setter TargetName="descriptionTextBox" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="noDescriptionTextBox" Property="Visibility" Value="Visible" />
						</DataTrigger>
					</DataTemplate.Triggers>
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type propgrid:PropertyGrid}">
					<shared:ElementChrome x:Name="chrome" Background="{TemplateBinding Background}"
							BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListBackgroundDisabledBrushKey}}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ListBorderDisabledBrushKey}}"
							BorderThickness="{TemplateBinding BorderThickness}" IsAnimationEnabled="False"
							BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.ListElementChromeBorderStyleKey}}" SnapsToDevicePixels="true">
						<Grid Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
							<Grid.RowDefinitions>
								<RowDefinition Height="*" />
								<RowDefinition Height="Auto" />
							</Grid.RowDefinitions>
							<Grid>
								<ScrollViewer x:Name="scrollViewer" Focusable="false" CanContentScroll="false">
									<ItemsPresenter />
								</ScrollViewer>
								<ContentPresenter x:Name="hint" Visibility="Collapsed" Content="{TemplateBinding Hint}"
										ContentTemplate="{TemplateBinding HintTemplate}" ContentTemplateSelector="{TemplateBinding HintTemplate}" />
							</Grid>
							<propgridPrimitives:PropertyGridSummaryContentControl x:Name="summary" Grid.Row="1"
									CanAutoSize="{TemplateBinding SummaryCanAutoSize}"
									Height="{Binding SummaryHeight, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
									IsResizable="{TemplateBinding IsSummaryResizable}" BorderBrush="{TemplateBinding BorderBrush}"
									Content="{TemplateBinding SelectedItem}" ContentTemplate="{TemplateBinding SummaryTemplate}"
									ContentTemplateSelector="{TemplateBinding SummaryTemplateSelector}" />
						</Grid>
					</shared:ElementChrome>

					<ControlTemplate.Triggers>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="scrollViewer" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="hint" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="IsSummaryVisible" Value="false">
							<Setter TargetName="summary" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
						<Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
							<Setter TargetName="scrollViewer" Property="CanContentScroll" Value="true" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
				<Setter Property="ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel />
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>