<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:navigation="clr-namespace:ActiproSoftware.Windows.Controls.Navigation;assembly=ActiproSoftware.Navigation.Wpf"
		xmlns:navigationPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Navigation.Primitives;assembly=ActiproSoftware.Navigation.Wpf"
		xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
		xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
		>

	<!-- Converters -->
	<shared:ImageConverter x:Key="ImageConverter" />

	<!-- ToggleButtonStyleKey -->
	<Style x:Key="ToggleButtonStyleKey" TargetType="{x:Type ButtonBase}">
		<Setter Property="OverridesDefaultStyle" Value="true" />

		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownBorderNormalThicknessKey}}" />

		<Setter Property="IsTabStop" Value="false" />
		<Setter Property="Focusable" Value="false" />
		<Setter Property="ClickMode" Value="Press" />

		<Setter Property="themes:ThemeProperties.IsAnimationEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonIsAnimationEnabledBooleanKey}}" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<shared:ScrollChrome x:Name="chrome" Background="{TemplateBinding Background}"
							BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownBackgroundDisabledBrushKey}}"
							BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownBackgroundHoverBrushKey}}"
							BackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownBackgroundPressedBrushKey}}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownBorderDisabledBrushKey}}"
							BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownBorderHoverBrushKey}}"
							BorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownBorderPressedBrushKey}}"
							BorderThickness="{TemplateBinding BorderThickness}"
							GlyphBackground="Black"
							GlyphBackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownGlyphBackgroundDisabledBrushKey}}"
							GlyphBackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownGlyphBackgroundHoverBrushKey}}"
							GlyphBackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownGlyphBackgroundPressedBrushKey}}"
							InnerBorderBrush="Transparent"
							InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownInnerBorderDisabledBrushKey}}"
							InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownInnerBorderHoverBrushKey}}"
							InnerBorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownInnerBorderPressedBrushKey}}"
							InnerBorderThickness="1" IsAnimationEnabled="{TemplateBinding themes:ThemeProperties.IsAnimationEnabled}"
							BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownElementChromeBorderStyleKey}}"
							CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownBorderNormalCornerRadiusKey}}"
							UseAlternateGeometry="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownGlyphUseAlternateGeometryBooleanKey}}"
							Glyph="DownArrow" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />

					<ControlTemplate.Triggers>
						<Trigger SourceName="chrome" Property="State" Value="Normal">
							<Setter TargetName="chrome" Property="BorderStyle" Value="None" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</Trigger>
						<Trigger Property="ToggleButton.IsChecked" Value="true">
							<Setter TargetName="chrome" Property="State" Value="Pressed" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="chrome" Property="State" Value="Pressed" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ComboBoxEditableTextBoxKey -->
	<Style x:Key="ComboBoxEditableTextBoxKey" TargetType="{x:Type TextBox}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		
		<Setter Property="AllowDrop" Value="true" />
		
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="MinHeight" Value="0" />
		
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		
		<Setter Property="Margin" Value="1,0,0,0" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
							Background="Transparent" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ComboBoxStyleKey -->
	<Style x:Key="ComboBoxStyleKey" TargetType="{x:Type ComboBox}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid x:Name="Placement" SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>

						<Popup x:Name="PART_Popup" Grid.ColumnSpan="3" AllowsTransparency="true" Placement="Bottom"
								PlacementTarget="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type navigation:Breadcrumb}, AncestorLevel=1}}"
								IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
								PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
							<shared:DropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ElementName=Placement,Path=ActualWidth}"
									MaxHeight="{TemplateBinding MaxDropDownHeight}">
								<Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static themes:AssetResourceKeys.PopupBackgroundNormalBrushKey}}"
										BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.PopupBorderNormalBrushKey}}"
										BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.PopupBorderNormalThicknessKey}}">
									<ScrollViewer>
										<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
									</ScrollViewer>
								</Border>
							</shared:DropShadowChrome>
						</Popup>

						<Image Grid.Column="0" Margin="3,0,2,0"
								Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type navigation:Breadcrumb}, AncestorLevel=1}, Path=SelectedContainer.ImageSource}"
								MinWidth="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type navigation:Breadcrumb}, AncestorLevel=1}, Path=ImageMinWidth}"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center" VerticalAlignment="Center"
								Stretch="None" />

						<TextBox x:Name="PART_EditableTextBox" Grid.Column="1" Style="{StaticResource ComboBoxEditableTextBoxKey}"
								IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}"
								HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" />
						<ToggleButton Grid.Column="2" Style="{StaticResource ToggleButtonStyleKey}"
								IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocusWithin" Value="true">
							<Setter Property="Foreground" Value="Black" />
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="dropDownBorder" Property="Height" Value="95" />
						</Trigger>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</Trigger>
						<Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
							<Setter TargetName="shadow" Property="Margin" Value="0,0,5,5" />
							<Setter TargetName="shadow" Property="Color" Value="#71000000" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- TransparentToggleButtonStyleKey -->
	<Style x:Key="TransparentToggleButtonStyleKey" TargetType="{x:Type ToggleButton}">
		<Setter Property="Background" Value="Transparent" />

		<Setter Property="Width" Value="Auto" />
		<Setter Property="Height" Value="Auto" />
		<Setter Property="MinWidth" Value="0" />
		<Setter Property="MinHeight" Value="0" />

		<Setter Property="ClickMode" Value="Press" />
		<Setter Property="Focusable" Value="false" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
						</Grid.ColumnDefinitions>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- navigation:Breadcrumb -->
	<Style x:Key="{x:Type navigation:Breadcrumb}" TargetType="{x:Type navigation:Breadcrumb}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.EditBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.EditBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.EditBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />

		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="Focusable" Value="true" />

		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="true" />

		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="SnapsToDevicePixels" Value="true" />

		<Setter Property="themes:ThemeProperties.IsAnimationEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.EditIsAnimationEnabledBooleanKey}}" />
		
		<!-- For keyboard navigation, we want Tab and Ctrl+Tab to move to the next/previous control immediately. We only want the
		       directional keys to be used to cycle through the focusable elements. -->
		<Setter Property="KeyboardNavigation.TabNavigation" Value="Once" />
		<Setter Property="KeyboardNavigation.ControlTabNavigation" Value="Once" />
		<Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle" />

		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock Text="{Binding}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="ComboBoxItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="Auto" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Image Grid.Column="0" Margin="2,2,0,2" Source="{Binding ImageSource}" Stretch="None" VerticalAlignment="Center" />
						<TextBlock Grid.Column="1" Margin="3,0,2,0" Text="{Binding Header}" VerticalAlignment="Center" />
					</Grid>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="MenuItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Static themes:SharedResourceKeys.MenuItemStyleKey}}">
					<Setter Property="Header" Value="{Binding Header}" />
					<Setter Property="Icon" Value="{Binding ImageSource, Converter={StaticResource ImageConverter}}" />
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="MenuItemExpandedTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock Margin="2,0,0,0" Text="{Binding}" FontWeight="Bold" />
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="MenuItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<TextBlock Margin="2,0,0,0" Text="{Binding}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<!-- Set the control template for the Breadcrumb -->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type navigation:Breadcrumb}">
					<shared:ElementChrome x:Name="chrome" Background="{TemplateBinding Background}"
							BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.EditBackgroundDisabledBrushKey}}"
							BackgroundFocused="{DynamicResource {x:Static themes:AssetResourceKeys.EditBackgroundFocusedBrushKey}}"
							BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.EditBackgroundHoverBrushKey}}" BorderBrush="{TemplateBinding BorderBrush}"
							BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.EditBorderDisabledBrushKey}}"
							BorderBrushFocused="{DynamicResource {x:Static themes:AssetResourceKeys.EditBorderFocusedBrushKey}}"
							BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.EditBorderHoverBrushKey}}" BorderThickness="{TemplateBinding BorderThickness}"
							IsAnimationEnabled="{TemplateBinding themes:ThemeProperties.IsAnimationEnabled}"
							BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.EditElementChromeBorderStyleKey}}" SnapsToDevicePixels="true">

						<Grid ClipToBounds="true">
							<!-- Progress bar which will span the entire control. -->
							<shared:ZeroSizeContentControl HasWidth="False" HasHeight="False" MaxWidth="{TemplateBinding ActualWidth}"
									MaxHeight="{TemplateBinding ActualHeight}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
									Margin="0,0,0,-3">
								<shared:AnimatedProgressBar x:Name="progressBar" Background="Transparent" BorderThickness="0"
										DecreaseDuration="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ProgressBarDecreaseDuration}"
										IncreaseDuration="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ProgressBarIncreaseDuration}"
										IsAnimationEnabled="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ProgressBarIsAnimationEnabled}"
										IsContinuous="true"
										IsIndeterminate="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ProgressBarIsIndeterminate}"
										Minimum="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ProgressBarMinimum}"
										Maximum="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ProgressBarMaximum}"
										State="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ProgressBarState}"
										Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ProgressBarValue}" Opacity="0"
										HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
							</shared:ZeroSizeContentControl>

							<Grid Grid.IsSharedSizeScope="true" Margin="{TemplateBinding Padding}">
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>

								<!-- Display the image of the selected item. -->
								<Image Grid.Column="0"
										Source="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=SelectedContainer.ImageSource}"
										MinWidth="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ImageMinWidth}"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" HorizontalAlignment="Center"
										VerticalAlignment="Center" Stretch="None" Margin="3,0,2,0" />

								<!-- Overlay a transparent ToggleButton over the Image above and extending out, so the user can click the image to
										   enter edit mode. -->
								<ToggleButton x:Name="editingToggleButton" Grid.ColumnSpan="3"
										IsChecked="{Binding Path=IsEditing,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
										Style="{StaticResource TransparentToggleButtonStyleKey}" Focusable="false" />

								<!-- ComboBox for editing and drop-down items, hidden by default. -->
								<ComboBox x:Name="PART_EditingComboBox" Grid.Column="0" Grid.ColumnSpan="4" BorderThickness="0"
										HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
										Style="{StaticResource ComboBoxStyleKey}"
										IsEditable="true" IsReadOnly="{TemplateBinding ComboBoxIsReadOnly}"
										ItemContainerStyle="{TemplateBinding ComboBoxItemContainerStyle}"
										ItemContainerStyleSelector="{TemplateBinding ComboBoxItemContainerStyleSelector}"
										ItemsSource="{TemplateBinding ComboBoxItemsSource}" ItemTemplate="{TemplateBinding ComboBoxItemTemplate}"
										ItemTemplateSelector="{TemplateBinding ComboBoxItemTemplateSelector}"
										StaysOpenOnEdit="{TemplateBinding ComboBoxStaysOpenOnEdit}"
										TextSearch.TextPath="{TemplateBinding ComboBoxTextPath}" Visibility="Collapsed" />

								<!-- Overflow button for BreadcrumbItems that cannot fit in the Breadcrumb. -->
								<navigationPrimitives:BreadcrumbOverflowButton x:Name="overflowButton" Grid.Column="1" Padding="0" DisplayMode="Merged" IsRounded="false"
										IsTransparencyModeEnabled="true" PopupHorizontalOffset="{TemplateBinding MenuHorizontalOffset}" PopupVerticalOffset="{TemplateBinding MenuVerticalOffset}">
									<navigationPrimitives:BreadcrumbOverflowButton.PopupIndicator>
										<Path Fill="Transparent" Stroke="{Binding Path=(TextBlock.Foreground), RelativeSource={RelativeSource Self}}"
												StrokeThickness="1" Data="M 3,0 L 0,2.5 L 3,5 M 7,0 L 4,2.5 L 7,5" Width="9">
											<Path.RenderTransform>
												<RotateTransform x:Name="overflowButtonPopupIndicatorRotationAngle" CenterX="3.5" CenterY="2.5" />
											</Path.RenderTransform>
										</Path>
									</navigationPrimitives:BreadcrumbOverflowButton.PopupIndicator>
								</navigationPrimitives:BreadcrumbOverflowButton>

								<!-- This is the actual bread crumb trail, starting at the root. -->
								<ContentPresenter x:Name="contentPresenter" Grid.Column="2" Content="{TemplateBinding RootContainer}"
										Focusable="false" />

								<!-- Editing button, which will look like a ComboBox drop down button, but will simply toggle edit mode. -->
								<shared:PopupButton x:Name="PART_EditingButton" Grid.Column="3" Style="{StaticResource ToggleButtonStyleKey}"
										Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" DisplayMode="ButtonOnly"
										IsRounded="false" IsTransparencyModeEnabled="true" ClickMode="Press" />

								<!-- Action buttons -->
								<ItemsControl Grid.Column="4"
										ItemsSource="{Binding Path=ActionButtons, RelativeSource={RelativeSource TemplatedParent}}" Focusable="false">
									<ItemsControl.ItemsPanel>
										<ItemsPanelTemplate>
											<StackPanel Orientation="Horizontal" />
										</ItemsPanelTemplate>
									</ItemsControl.ItemsPanel>
								</ItemsControl>
							</Grid>
						</Grid>
					</shared:ElementChrome>

					<ControlTemplate.Triggers>
						<!-- This trigger will hide the editing controls when the control is not editable. -->
						<Trigger Property="IsEditable" Value="false">
							<Setter TargetName="editingToggleButton" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="PART_EditingComboBox" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="PART_EditingButton" Property="Visibility" Value="Collapsed" />
						</Trigger>

						<!-- This trigger will collapse the OverflowButton if IsOverflowButtonVisible is false. -->
						<Trigger Property="IsOverflowButtonVisible" Value="false">
							<Setter TargetName="overflowButton" Property="Visibility" Value="Collapsed" />
						</Trigger>

						<!-- This trigger will rotate the OverflowButton indicator when it's popup is open. -->
						<Trigger SourceName="overflowButton" Property="IsPopupOpen" Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0:0:0.15" To="-90.0"
												Storyboard.TargetName="overflowButtonPopupIndicatorRotationAngle" Storyboard.TargetProperty="Angle" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0:0:0.15" To="0.0"
												Storyboard.TargetName="overflowButtonPopupIndicatorRotationAngle" Storyboard.TargetProperty="Angle" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>

						<!-- This trigger will fade in/out the ProgressBar when it is made visible/invisible. -->
						<Trigger Property="IsProgressBarVisible" Value="true">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0:0:1" To="0.5" Storyboard.TargetName="progressBar"
												Storyboard.TargetProperty="(UIElement.Opacity)" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Duration="0:0:1" To="0.0" Storyboard.TargetName="progressBar"
												Storyboard.TargetProperty="(UIElement.Opacity)" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>

						<!-- This trigger will show the PART_EditingComboBox control and hide the bread-crumb controls (and set a
						       few other properties) when the Breadcrumb control enters edit mode. -->
						<Trigger Property="IsEditing" Value="true">
							<Setter Property="IsTabStop" Value="false" />
							<Setter TargetName="progressBar" Property="Visibility" Value="Hidden" />
							<Setter TargetName="overflowButton" Property="Visibility" Value="Hidden" />
							<Setter TargetName="contentPresenter" Property="Visibility" Value="Hidden" />
							<Setter TargetName="PART_EditingButton" Property="Visibility" Value="Hidden" />
							<Setter TargetName="PART_EditingComboBox" Property="Visibility" Value="Visible" />
						</Trigger>

						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="chrome" Property="State" Value="Focused" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Style for BreadcrumbItem control, including default ControlTemplate. -->
	<Style x:Key="{x:Type navigation:BreadcrumbItem}" TargetType="{x:Type navigation:BreadcrumbItem}">
		<!-- Propagate certain properties from the parent Breadcrumb or BreadcrumbItem controls to this BreadcrumbItem. -->
		<Setter Property="ItemContainerStyle"
				Value="{Binding Path=ItemContainerStyle, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="ItemContainerStyleSelector"
				Value="{Binding Path=ItemContainerStyleSelector, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="ItemMinimizedTemplate"
				Value="{Binding Path=ItemMinimizedTemplate, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="ItemMinimizedTemplateSelector"
				Value="{Binding Path=ItemMinimizedTemplateSelector, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="ItemTemplate"
				Value="{Binding Path=ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="ItemTemplateSelector"
				Value="{Binding Path=ItemTemplateSelector, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />

		<Setter Property="HeaderTemplate"
				Value="{Binding Path=ItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="HeaderTemplateSelector"
				Value="{Binding Path=ItemTemplateSelector, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />

		<Setter Property="MenuItemContainerExpandedStyle"
				Value="{Binding Path=MenuItemContainerExpandedStyle, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="MenuItemContainerExpandedStyleSelector"
				Value="{Binding Path=MenuItemContainerExpandedStyleSelector, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="MenuItemExpandedTemplate"
				Value="{Binding Path=MenuItemExpandedTemplate, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="MenuItemExpandedTemplateSelector"
				Value="{Binding Path=MenuItemExpandedTemplateSelector, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />

		<Setter Property="MenuItemContainerStyle"
				Value="{Binding Path=MenuItemContainerStyle, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="MenuItemContainerStyleSelector"
				Value="{Binding Path=MenuItemContainerStyleSelector, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="MenuItemTemplate"
				Value="{Binding Path=MenuItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="MenuItemTemplateSelector"
				Value="{Binding Path=MenuItemTemplateSelector, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />

		<Setter Property="MenuHorizontalOffset"
				Value="{Binding Path=MenuHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
		<Setter Property="MenuVerticalOffset"
				Value="{Binding Path=MenuVerticalOffset, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />

		<!-- By default we will bind the Header to the data item in the BreadcrumbItem. -->
		<Setter Property="Header" Value="{Binding}" />

		<Setter Property="Focusable" Value="false" />

		<!-- Control template for the BreadcrumbItem. -->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type navigation:BreadcrumbItem}">
					<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto" />
								<ColumnDefinition x:Name="expandedItemColumnDefinition" Width="*" />
							</Grid.ColumnDefinitions>
							<!-- 3/3/2011 - Added ContentTemplateSelector binding (3C4-14BEF8A1-1264) -->
							<navigationPrimitives:BreadcrumbItemNavigateButton x:Name="navigateButton" Grid.Column="0" Padding="0"
									HorizontalContentAlignment="Stretch" Content="{TemplateBinding Header}"
									ContentTemplate="{TemplateBinding HeaderTemplate}"
									ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Command="navigation:Breadcrumb.SelectItem"
									CommandParameter="{x:Null}" IsRounded="false" IsTransparencyModeEnabled="true"
									PopupHorizontalOffset="{TemplateBinding MenuHorizontalOffset}"
									PopupVerticalOffset="{TemplateBinding MenuVerticalOffset}" ToolTip="{TemplateBinding ToolTip}" />
							<ContentPresenter x:Name="expandedItemContentPresenter" Grid.Column="1" Content="{TemplateBinding ExpandedContainer}"
									Focusable="false" />
						</Grid>
					</Border>

					<ControlTemplate.Triggers>
						<!-- This trigger will change how this item sizes it's content. By default, the NavigateButton should
						       be sized to it's content and the ExpandedItemContentPresenter should take up any remaining space.
						       When the width is constrained, then the selected item, should size its' NavigateButton smaller so
						       that it fills the control. -->
						<Trigger Property="IsWidthConstrained" Value="true">
							<Setter TargetName="navigateButton" Property="Width"
									Value="{Binding Path=ConstrainedWidth, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
							<Setter TargetName="expandedItemColumnDefinition" Property="ColumnDefinition.Width" Value="0" />
						</Trigger>

						<!-- This trigger will collapse the NavigateButton if IsOverflowed is true. This is used for items above
						       the selected item, because we cannot collapse the entire item (otherwise we would hide the selected
						       item as well. -->
						<Trigger Property="IsOverflowed" Value="true">
							<Setter TargetName="navigateButton" Property="Visibility" Value="Collapsed" />
						</Trigger>

						<!-- This trigger will change the ItemTemplate of the Header if the item is minimized. -->
						<Trigger Property="IsMinimized" Value="true">
							<Setter Property="HeaderTemplate"
									Value="{Binding Path=ItemMinimizedTemplate, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
							<Setter Property="HeaderTemplateSelector"
									Value="{Binding Path=ItemMinimizedTemplateSelector, RelativeSource={RelativeSource AncestorType={x:Type navigationPrimitives:IBreadcrumbCommon}}}" />
						</Trigger>

						<!-- This trigger will collapse the entire BreadcrumbItem if IsOverflowed is true and this item does not
						        contain the selection (e.g. it's a tail item). -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsOverflowed" Value="true" />
								<Condition Property="ContainsSelection" Value="false" />
							</MultiTrigger.Conditions>
							<Setter Property="Visibility" Value="Collapsed" />
						</MultiTrigger>

						<!-- This trigger will set the NavigateButton to only display the content if the BreadcrumbItem does not
						       have any child items. -->
						<Trigger Property="ItemsControl.HasItems" Value="false">
							<Setter TargetName="navigateButton" Property="DisplayMode" Value="ButtonOnly" />
						</Trigger>

						<!-- This trigger will change the NavigateButton to only display the indicator if the HeaderTemplate is
						       null and the item is minimized. -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMinimized" Value="true" />
								<Condition Property="HeaderTemplate" Value="{x:Null}" />
							</MultiTrigger.Conditions>
							<Setter TargetName="navigateButton" Property="DisplayMode" Value="PopupOnly" />
						</MultiTrigger>

						<!-- This trigger will collapse the ExpandedItemContentPresenter if ExpandedItem is null. -->
						<Trigger Property="ExpandedItem" Value="{x:Null}">
							<Setter TargetName="expandedItemContentPresenter" Property="Visibility" Value="Collapsed" />
						</Trigger>

						<!-- This trigger will fade the navigate button if it is a tail item. -->
						<Trigger Property="IsTailItem" Value="true">
							<Setter TargetName="navigateButton" Property="Opacity"
									Value="{Binding Path=TailItemOpacity, RelativeSource={RelativeSource AncestorType={x:Type navigation:Breadcrumb}}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>