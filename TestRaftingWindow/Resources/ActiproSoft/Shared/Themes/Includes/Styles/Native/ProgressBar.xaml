<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
		xmlns:controls="clr-namespace:ActiproSoftware.Windows.Controls;assembly=ActiproSoftware.Shared.Wpf"
		xmlns:controlsPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Primitives;assembly=ActiproSoftware.Shared.Wpf"
		xmlns:themes="clr-namespace:ActiproSoftware.Windows.Themes;assembly=ActiproSoftware.Shared.Wpf">

	<!-- Converters -->
	<BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

	<!-- Glass Effect Brushes -->
	<LinearGradientBrush x:Key="ProgressBarTopHighlight" StartPoint="0,0" EndPoint="0,1" PresentationOptions:Freeze="True">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="#80FFFFFF" Offset="0.05" />
			<GradientStop Color="#00FFFFFF" Offset="0.25" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ProgressBarGlassyHighlight" StartPoint="0,0" EndPoint="0,1" PresentationOptions:Freeze="True">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="#50FFFFFF" Offset="0.3333" />
			<GradientStop Color="#00FFFFFF" Offset="0.3333" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ProgressBarIndicatorGlassyHighlight" StartPoint="0,0" EndPoint="0,1" PresentationOptions:Freeze="True">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="#90FFFFFF" Offset="0.3333" />
			<GradientStop Color="#00FFFFFF" Offset="0.3333" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectLeft" RadiusX="1" RadiusY="1" RelativeTransform="1,0,0,1,0.5,0.5"
			PresentationOptions:Freeze="True">
		<RadialGradientBrush.GradientStops>
			<GradientStop Color="#60FFFFC4" Offset="0" />
			<GradientStop Color="#00FFFFC4" Offset="1" />
		</RadialGradientBrush.GradientStops>
	</RadialGradientBrush>
	<LinearGradientBrush x:Key="ProgressBarIndicatorLightingEffect" StartPoint="0,1" EndPoint="0,0" PresentationOptions:Freeze="True">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="#60FFFFC4" Offset="0" />
			<GradientStop Color="#00FFFFC4" Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<RadialGradientBrush x:Key="ProgressBarIndicatorLightingEffectRight" RadiusX="1" RadiusY="1" RelativeTransform="1,0,0,1,-0.5,0.5"
			PresentationOptions:Freeze="True">
		<RadialGradientBrush.GradientStops>
			<GradientStop Color="#60FFFFC4" Offset="0" />
			<GradientStop Color="#00FFFFC4" Offset="1" />
		</RadialGradientBrush.GradientStops>
	</RadialGradientBrush>
	<LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeLeft" StartPoint="0,0" EndPoint="1,0" PresentationOptions:Freeze="True">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="#0C000000" Offset="0" />
			<GradientStop Color="#20000000" Offset="0.3" />
			<GradientStop Color="#00000000" Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>
	<LinearGradientBrush x:Key="ProgressBarIndicatorDarkEdgeRight" StartPoint="0,0" EndPoint="1,0" PresentationOptions:Freeze="True">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="#00000000" Offset="0" />
			<GradientStop Color="#20000000" Offset="0.7" />
			<GradientStop Color="#0C000000" Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="ProgressBarIndicatorAnimatedFill" MappingMode="Absolute" StartPoint="-100,0" EndPoint="0,0" PresentationOptions:Freeze="True">
		<LinearGradientBrush.GradientStops>
			<GradientStop Color="#00000000" Offset="0" />
			<GradientStop Color="#FF000000" Offset="0.4" />
			<GradientStop Color="#FF000000" Offset="0.6" />
			<GradientStop Color="#00000000" Offset="1" />
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<!-- themes:SharedResourceKeys.ProgressBarStyleKey -->
	<Style x:Key="{x:Static themes:SharedResourceKeys.ProgressBarStyleKey}" TargetType="{x:Type RangeBase}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarForegroundNormalBrushKey}}" />

		<Setter Property="themes:ProgressBarThemeProperties.IsContinuous"
				Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarIsContinuousBooleanKey}}" />
		<Setter Property="themes:ProgressBarThemeProperties.IsGlassEnabled"
				Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarIsGlassEnabledBooleanKey}}" />
		<Setter Property="themes:ProgressBarThemeProperties.UseHighlightForIndeterminateIndicator"
				Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarUseHighlightForIndeterminateIndicatorBooleanKey}}" />
		<Setter Property="themes:ThemeProperties.CornerRadius"
				Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarBorderNormalCornerRadiusKey}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RangeBase}">
					<controlsPrimitives:ElementChrome x:Name="chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarInnerBorderNormalBrushKey}}"
							InnerBorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarInnerBorderNormalThicknessKey}}"
							BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarElementChromeBorderStyleKey}}"
							CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="true">
						<Grid x:Name="backgroundGrid">
							<Border Background="{StaticResource ProgressBarGlassyHighlight}" CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}"
									Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ProgressBarThemeProperties.IsGlassEnabled), Converter={StaticResource BooleanToVisibilityConverter}}" />
							<Border BorderBrush="#80FFFFFF" Background="{StaticResource ProgressBarTopHighlight}" BorderThickness="1,0,1,1"
									Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ProgressBarThemeProperties.IsGlassEnabled), Converter={StaticResource BooleanToVisibilityConverter}}" />
							<Rectangle x:Name="PART_Track" />

							<Decorator x:Name="PART_Indicator" HorizontalAlignment="Left" Margin="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarPaddingNormalThicknessKey}}">
								<Decorator.OpacityMask>
									<MultiBinding>
										<MultiBinding.Converter>
											<controlsPrimitives:ProgressBarSegmentedBrushConverter />
										</MultiBinding.Converter>
										<Binding Path="(themes:ProgressBarThemeProperties.IsContinuous)" RelativeSource="{RelativeSource TemplatedParent}" />
										<Binding Path="(ProgressBar.Orientation)" RelativeSource="{RelativeSource TemplatedParent}" />
										<Binding Path="ActualWidth" ElementName="PART_Indicator" />
										<Binding Path="ActualHeight" ElementName="PART_Indicator" />
										<Binding Path="ActualWidth" ElementName="PART_Track" />
										<Binding Path="ActualHeight" ElementName="PART_Track" />
									</MultiBinding>
								</Decorator.OpacityMask>
								<Grid x:Name="foregroundGrid">
									<Rectangle x:Name="indicator" Fill="{TemplateBinding Foreground}" />
									<Rectangle x:Name="animation"
											Fill="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarHighlightNormalBrushKey}}">
										<Rectangle.OpacityMask>
											<MultiBinding>
												<MultiBinding.Converter>
													<controlsPrimitives:ProgressBarHighlightBrushConverter />
												</MultiBinding.Converter>
												<Binding Source="{StaticResource ProgressBarIndicatorAnimatedFill}" />
												<Binding Path="ActualWidth" ElementName="backgroundGrid" />
												<Binding Path="ActualHeight" ElementName="backgroundGrid" />
											</MultiBinding>
										</Rectangle.OpacityMask>
									</Rectangle>
									<Grid
											Visibility="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ProgressBarThemeProperties.IsGlassEnabled), Converter={StaticResource BooleanToVisibilityConverter}}">
										<Grid.ColumnDefinitions>
											<ColumnDefinition MaxWidth="15" />
											<ColumnDefinition Width="0.1*" />
											<ColumnDefinition MaxWidth="15" />
										</Grid.ColumnDefinitions>
										<Grid.RowDefinitions>
											<RowDefinition />
											<RowDefinition />
										</Grid.RowDefinitions>
										<Rectangle x:Name="LeftDark" Grid.RowSpan="2" Fill="{StaticResource ProgressBarIndicatorDarkEdgeLeft}" RadiusX="1"
												RadiusY="1" Margin="1,1,0,1" />
										<Rectangle x:Name="RightDark" Grid.RowSpan="2" Grid.Column="2" RadiusX="1" RadiusY="1"
												Fill="{StaticResource ProgressBarIndicatorDarkEdgeRight}" Margin="0,1,1,1" />
										<Rectangle x:Name="LeftLight" Grid.Column="0" Grid.Row="2"
												Fill="{StaticResource ProgressBarIndicatorLightingEffectLeft}" />
										<Rectangle x:Name="CenterLight" Grid.Column="1" Grid.Row="2" Fill="{StaticResource ProgressBarIndicatorLightingEffect}" />
										<Rectangle x:Name="RightLight" Grid.Column="2" Grid.Row="2"
												Fill="{StaticResource ProgressBarIndicatorLightingEffectRight}" />
										<Border x:Name="Highlight1" Grid.RowSpan="2" Grid.ColumnSpan="3"
												Background="{StaticResource ProgressBarIndicatorGlassyHighlight}" />
										<Border x:Name="Highlight2" Grid.RowSpan="2" Grid.ColumnSpan="3" Background="{StaticResource ProgressBarTopHighlight}" />
									</Grid>
								</Grid>
							</Decorator>
						</Grid>
					</controlsPrimitives:ElementChrome>
					<ControlTemplate.Triggers>
						<Trigger Property="ProgressBar.Orientation" Value="Vertical">
							<Setter TargetName="backgroundGrid" Property="LayoutTransform">
								<Setter.Value>
									<RotateTransform Angle="-90" />
								</Setter.Value>
							</Setter>
						</Trigger>

						<!-- Collapse all the highlight elements and the indicator element when the progress bar is indeterminate -->
						<Trigger Property="ProgressBar.IsIndeterminate" Value="True">
							<Setter TargetName="LeftDark" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="RightDark" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="LeftLight" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="CenterLight" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="RightLight" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="indicator" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="animation" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" />
						</Trigger>

						<!-- Change the animation fill color based on the current state and when in the progress bar is not indeterminate -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ProgressBar.IsIndeterminate" Value="false" />
								<Condition Property="themes:ProgressBarThemeProperties.State" Value="Normal" />
							</MultiTrigger.Conditions>
							<Setter TargetName="animation" Property="Fill"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarHighlightNormalBrushKey}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ProgressBar.IsIndeterminate" Value="false" />
								<Condition Property="themes:ProgressBarThemeProperties.State" Value="Paused" />
							</MultiTrigger.Conditions>
							<Setter TargetName="animation" Property="Fill"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarHighlightPausedBrushKey}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ProgressBar.IsIndeterminate" Value="false" />
								<Condition Property="themes:ProgressBarThemeProperties.State" Value="Error" />
							</MultiTrigger.Conditions>
							<Setter TargetName="animation" Property="Fill"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarHighlightErrorBrushKey}}" />
						</MultiTrigger>

						<!-- When the highlight is not used as the indetermindate indicator, then we need to use the actual indicator -->
						<Trigger Property="themes:ProgressBarThemeProperties.UseHighlightForIndeterminateIndicator" Value="False">
							<Setter TargetName="indicator" Property="Visibility" Value="Visible" />
							<Setter TargetName="animation" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="PART_Indicator" Property="OpacityMask">
								<Setter.Value>
									<MultiBinding>
										<MultiBinding.Converter>
											<controlsPrimitives:ProgressBarSegmentedBrushConverter />
										</MultiBinding.Converter>
										<Binding Path="(themes:ProgressBarThemeProperties.IsContinuous)" RelativeSource="{RelativeSource TemplatedParent}" />
										<Binding Path="(ProgressBar.Orientation)" RelativeSource="{RelativeSource TemplatedParent}" />
										<Binding Path="ActualWidth" ElementName="PART_Indicator" />
										<Binding Path="ActualHeight" ElementName="PART_Indicator" />
										<Binding Path="ActualWidth" ElementName="PART_Track" />
										<Binding Path="ActualHeight" ElementName="PART_Track" />
										<Binding Path="(ProgressBar.IsIndeterminate)" RelativeSource="{RelativeSource TemplatedParent}" />
									</MultiBinding>
								</Setter.Value>
							</Setter>
						</Trigger>

						<!-- Change the foreground color to a yellow, when in the paused state -->
						<Trigger Property="themes:ProgressBarThemeProperties.State" Value="Paused">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarForegroundPausedBrushKey}}" />
						</Trigger>

						<!-- Change the foreground color to a red, when in the error state -->
						<Trigger Property="themes:ProgressBarThemeProperties.State" Value="Error">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ProgressBarForegroundErrorBrushKey}}" />
						</Trigger>

						<!-- Stop the animation that moves across the colored area when IsCompleted is true-->
						<Trigger Property="controls:AnimatedProgressBar.IsCompleted" Value="true">
							<Setter TargetName="animation" Property="Visibility" Value="Collapsed" />
						</Trigger>

					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>
