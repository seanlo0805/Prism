<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:controls="clr-namespace:ActiproSoftware.Windows.Controls;assembly=ActiproSoftware.Shared.Wpf"
		xmlns:controlsPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Primitives;assembly=ActiproSoftware.Shared.Wpf"
		xmlns:themes="clr-namespace:ActiproSoftware.Windows.Themes;assembly=ActiproSoftware.Shared.Wpf"
		>

	<!--
	
	BUTTON
	
	-->

	<!-- ButtonFocusVisual -->
	<Style x:Key="ButtonFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" StrokeThickness="1"
							Stroke="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" StrokeDashArray="1 2"
							SnapsToDevicePixels="true" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- themes:SharedResourceKeys.ButtonBaseStyleKey -->
	<Style x:Key="{x:Static themes:SharedResourceKeys.ButtonBaseStyleKey}" TargetType="{x:Type ButtonBase}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />

		<Setter Property="Padding" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonPaddingNormalThicknessKey}}" />
		<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderNormalCornerRadiusKey}}" />

		<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
		<Setter Property="themes:ThemeProperties.IsAnimationEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonIsAnimationEnabledBooleanKey}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<controlsPrimitives:ElementChrome x:Name="chrome" Background="{TemplateBinding Background}"
							BackgroundDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundDefaultedBrushKey}}"
							BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundDisabledBrushKey}}"
							BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundHoverBrushKey}}"
							BackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundPressedBrushKey}}"
							BorderBrush="{TemplateBinding BorderBrush}"
							BorderBrushDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderDefaultedBrushKey}}"
							BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderDisabledBrushKey}}"
							BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderHoverBrushKey}}"
							BorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderPressedBrushKey}}"
							BorderThickness="{TemplateBinding BorderThickness}"
							Highlight="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightNormalBrushKey}}"
							HighlightDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightDefaultedBrushKey}}"
							HighlightDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightDisabledBrushKey}}"
							HighlightHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightHoverBrushKey}}"
							HighlightPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightPressedBrushKey}}"
							InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderNormalBrushKey}}"
							InnerBorderBrushDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderDefaultedBrushKey}}"
							InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderDisabledBrushKey}}"
							InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderHoverBrushKey}}"
							InnerBorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderPressedBrushKey}}"
							InnerBorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderNormalThicknessKey}}"
							IsAnimationEnabled="{TemplateBinding themes:ThemeProperties.IsAnimationEnabled}"
							BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonElementChromeBorderStyleKey}}"
							CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}"
							SnapsToDevicePixels="true">
						<ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</controlsPrimitives:ElementChrome>

					<ControlTemplate.Triggers>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundDefaultedBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Defaulted" />
						</Trigger>
						<Trigger Property="Button.IsDefaulted" Value="true">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundDefaultedBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Defaulted" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundPressedBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Pressed" />
						</Trigger>
						<Trigger Property="ToggleButton.IsChecked" Value="true">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundPressedBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Pressed" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground"
									Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- themes:SharedResourceKeys.EmbeddedButtonBaseStyleKey -->
	<Style x:Key="{x:Static themes:SharedResourceKeys.EmbeddedButtonBaseStyleKey}" TargetType="{x:Type ButtonBase}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalThicknessKey}}" />

		<Setter Property="Padding" Value="0" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />

		<Setter Property="Focusable" Value="False" />
		<Setter Property="IsTabStop" Value="False" />
		
		<Setter Property="themes:ThemeProperties.DisabledOpacity" Value="0.4" />
		
		<Setter Property="SnapsToDevicePixels" Value="True" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border x:Name="outerBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness}"
							CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="true">
						<Grid>
							<Border x:Name="innerBorder" BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderNormalBrushKey}}"
									BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalThicknessKey}}"
									CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="true" />
							<controls:PixelSnapper VerticalRoundMode="CeilingToEven">
								<ContentPresenter x:Name="presenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</controls:PixelSnapper>
						</Grid>
					</Border>

					<ControlTemplate.Triggers>
						<Trigger Property="ToggleButton.IsChecked" Value="true">
							<Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedNormalBrushKey}}" />
							<Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedNormalBrushKey}}" />
							<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderCheckedNormalBrushKey}}" />
							<Setter TargetName="presenter" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
							<Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}" />
							<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
							<Setter TargetName="presenter" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
						</Trigger>
						<Trigger Property="IsKeyboardFocused" Value="true">
							<Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
							<Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}" />
							<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
							<Setter TargetName="presenter" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="true" />
								<Condition Property="ToggleButton.IsChecked" Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedHoverBrushKey}}" />
							<Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedHoverBrushKey}}" />
							<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderCheckedHoverBrushKey}}" />
							<Setter TargetName="presenter" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsKeyboardFocused" Value="true" />
								<Condition Property="ToggleButton.IsChecked" Value="true" />
							</MultiTrigger.Conditions>
							<Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedHoverBrushKey}}" />
							<Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedHoverBrushKey}}" />
							<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderCheckedHoverBrushKey}}" />
							<Setter TargetName="presenter" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
						</MultiTrigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="outerBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundPressedBrushKey}}" />
							<Setter TargetName="outerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderPressedBrushKey}}" />
							<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderPressedBrushKey}}" />
							<Setter TargetName="presenter" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="presenter" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="presenter" Property="Opacity" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ThemeProperties.DisabledOpacity)}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- themes:SharedResourceKeys.EmbeddedButtonBaseOverrideStyleKey -->
	<Style x:Key="{x:Static themes:SharedResourceKeys.EmbeddedButtonBaseOverrideStyleKey}" TargetType="{x:Type ButtonBase}"
			BasedOn="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedButtonBaseStyleKey}}">
		<Setter Property="OverridesDefaultStyle" Value="True" />
	</Style>

	<!-- themes:SharedResourceKeys.ToolBarEmbeddedButtonBaseStyleKey -->
	<Style x:Key="{x:Static themes:SharedResourceKeys.ToolBarEmbeddedButtonBaseStyleKey}" TargetType="{x:Type ButtonBase}"
			BasedOn="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedButtonBaseStyleKey}}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalBrushKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundNormalBrushKey}}" />

		<Setter Property="Focusable" Value="True" />
		<Setter Property="IsTabStop" Value="True" />
		
		<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalCornerRadiusKey}}" />
		<Setter Property="Padding" Value="2" />
	</Style>

	<!--
	
	BULLET
	
	-->

	<!-- CheckRadioFocusVisual -->
	<Style x:Key="CheckRadioFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="14,0,0,0" StrokeThickness="1"
							Stroke="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" StrokeDashArray="1 2"
							SnapsToDevicePixels="true" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- EmptyCheckBoxFocusVisual -->
	<Style x:Key="EmptyCheckBoxFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="1" StrokeThickness="1" Stroke="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}"
							StrokeDashArray="1 2" SnapsToDevicePixels="true" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- themes:SharedResourceKeys.CheckBoxStyleKey -->
	<Style x:Key="{x:Static themes:SharedResourceKeys.CheckBoxStyleKey}" TargetType="{x:Type CheckBox}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />

		<Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}" />

		<Setter Property="themes:ThemeProperties.IsAnimationEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletIsAnimationEnabledBooleanKey}}" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
						<BulletDecorator.Bullet>
							<controlsPrimitives:CheckChrome x:Name="chrome" Background="{TemplateBinding Background}"
									BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundDisabledBrushKey}}"
									BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundHoverBrushKey}}"
									BackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundPressedBrushKey}}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderDisabledBrushKey}}"
									BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderHoverBrushKey}}"
									BorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderPressedBrushKey}}"
									InnerBackground="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundNormalBrushKey}}"
									InnerBackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundDisabledBrushKey}}"
									InnerBackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundHoverBrushKey}}"
									InnerBackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundPressedBrushKey}}"
									InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderNormalBrushKey}}"
									InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderDisabledBrushKey}}"
									InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderHoverBrushKey}}"
									InnerBorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderPressedBrushKey}}"
									GlyphBackgroundChecked="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBackgroundCheckedNormalBrushKey}}"
									GlyphBackgroundCheckedDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBackgroundCheckedDisabledBrushKey}}"
									GlyphBackgroundCheckedHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBackgroundCheckedHoverBrushKey}}"
									GlyphBackgroundCheckedPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBackgroundCheckedPressedBrushKey}}"
									GlyphBorderBrushChecked="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBorderCheckedNormalBrushKey}}"
									GlyphBorderBrushCheckedDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBorderCheckedDisabledBrushKey}}"
									GlyphBackgroundIndeterminate="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateNormalBrushKey}}"
									GlyphBackgroundIndeterminateDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateDisabledBrushKey}}"
									GlyphBackgroundIndeterminateHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateHoverBrushKey}}"
									GlyphBackgroundIndeterminatePressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminatePressedBrushKey}}"
									GlyphBorderBrushIndeterminate="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateNormalBrushKey}}"
									GlyphBorderBrushIndeterminateDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateDisabledBrushKey}}"
									GlyphBorderBrushIndeterminateHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateHoverBrushKey}}"
									GlyphBorderBrushIndeterminatePressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminatePressedBrushKey}}"
									IsAnimationEnabled="{TemplateBinding themes:ThemeProperties.IsAnimationEnabled}"
									IsChecked="{TemplateBinding IsChecked}"
									BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBulletChromeBorderStyleKey}}"
									UseAlternateGeometry="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphUseAlternateGeometryBooleanKey}}" />
						</BulletDecorator.Bullet>
						<ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
								SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</BulletDecorator>

					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}" />
							<Setter Property="Padding" Value="4,0,0,0" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundPressedBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Pressed" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>

			</Setter.Value>
		</Setter>
	</Style>

	<!-- themes:SharedResourceKeys.RadioButtonStyleKey -->
	<Style x:Key="{x:Static themes:SharedResourceKeys.RadioButtonStyleKey}" TargetType="{x:Type RadioButton}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />

		<Setter Property="themes:ThemeProperties.IsAnimationEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletIsAnimationEnabledBooleanKey}}" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type RadioButton}">
					<BulletDecorator Background="Transparent">
						<BulletDecorator.Bullet>
							<controlsPrimitives:RadioChrome x:Name="chrome" Background="{TemplateBinding Background}"
									BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundDisabledBrushKey}}"
									BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundHoverBrushKey}}"
									BackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundPressedBrushKey}}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderDisabledBrushKey}}"
									BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderHoverBrushKey}}"
									BorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderPressedBrushKey}}"
									InnerBackground="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundNormalBrushKey}}"
									InnerBackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundDisabledBrushKey}}"
									InnerBackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundHoverBrushKey}}"
									InnerBackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundPressedBrushKey}}"
									InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderNormalBrushKey}}"
									InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderDisabledBrushKey}}"
									InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderHoverBrushKey}}"
									InnerBorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderPressedBrushKey}}"
									GlyphBackgroundChecked="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBackgroundCheckedNormalBrushKey}}"
									GlyphBackgroundCheckedDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBackgroundCheckedDisabledBrushKey}}"
									GlyphBackgroundCheckedHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBackgroundCheckedHoverBrushKey}}"
									GlyphBackgroundCheckedPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBackgroundCheckedPressedBrushKey}}"
									GlyphBorderBrushChecked="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBorderCheckedNormalBrushKey}}"
									GlyphBorderBrushCheckedDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBorderCheckedDisabledBrushKey}}"
									GlyphBackgroundIndeterminate="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateNormalBrushKey}}"
									GlyphBackgroundIndeterminateDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateDisabledBrushKey}}"
									GlyphBackgroundIndeterminateHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateHoverBrushKey}}"
									GlyphBackgroundIndeterminatePressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminatePressedBrushKey}}"
									GlyphBorderBrushIndeterminate="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateNormalBrushKey}}"
									GlyphBorderBrushIndeterminateDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateDisabledBrushKey}}"
									GlyphBorderBrushIndeterminateHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateHoverBrushKey}}"
									GlyphBorderBrushIndeterminatePressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminatePressedBrushKey}}"
									IsAnimationEnabled="{TemplateBinding themes:ThemeProperties.IsAnimationEnabled}"
									IsChecked="{TemplateBinding IsChecked}"
									BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBulletChromeBorderStyleKey}}"
									UseAlternateGeometry="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphUseAlternateGeometryBooleanKey}}" />
						</BulletDecorator.Bullet>
						<ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" />
					</BulletDecorator>

					<ControlTemplate.Triggers>
						<Trigger Property="HasContent" Value="true">
							<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}" />
							<Setter Property="Padding" Value="4,0,0,0" />
						</Trigger>
						<Trigger Property="IsMouseOver" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundHoverBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</Trigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundPressedBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Pressed" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--
	
	HYPERLINK
	
	-->

	<!-- themes:SharedResourceKeys.HyperlinkStyleKey -->
	<Style x:Key="{x:Static themes:SharedResourceKeys.HyperlinkStyleKey}" TargetType="{x:Type Hyperlink}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.HyperlinkForegroundNormalBrushKey}}" />
		<Setter Property="TextDecorations" Value="Underline" />
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.HyperlinkForegroundHoverBrushKey}}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="true">
				<Setter Property="Cursor" Value="Hand" />
			</Trigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>
