<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:controls="clr-namespace:ActiproSoftware.Windows.Controls;assembly=ActiproSoftware.Shared.Wpf"
		xmlns:controlsPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Primitives;assembly=ActiproSoftware.Shared.Wpf"
		xmlns:data="clr-namespace:ActiproSoftware.Windows.Data;assembly=ActiproSoftware.Shared.Wpf"
		xmlns:themes="clr-namespace:ActiproSoftware.Windows.Themes;assembly=ActiproSoftware.Shared.Wpf">

	<!-- Converters -->
	<data:CornerRadiusConverter x:Key="CornerRadiusConverter" />

	<!-- 
	
	CONTROL TEMPLATES
	
	-->

	<!-- PopupButtonDefaultTemplate -->
	<ControlTemplate x:Key="PopupButtonDefaultTemplate" TargetType="{x:Type controls:PopupButton}">
		<Grid SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition x:Name="contentColumn" Width="*" />
				<ColumnDefinition Width="1" MaxWidth="1" />
				<ColumnDefinition x:Name="indicatorColumn" Width="Auto" />
			</Grid.ColumnDefinitions>
			<controlsPrimitives:ElementChrome x:Name="contentArea" Grid.Column="0" Grid.ColumnSpan="2"
					Background="{TemplateBinding Background}"
					BackgroundDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundDefaultedBrushKey}}"
					BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundDisabledBrushKey}}"
					BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundHoverBrushKey}}"
					BackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundPressedBrushKey}}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderBrushDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderDefaultedBrushKey}}"
					BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderDisabledBrushKey}}"
					BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderHoverBrushKey}}"
					BorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderPressedBrushKey}}"
					BorderThickness="{TemplateBinding BorderThickness}"
					Highlight="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightNormalBrushKey}}"
					HighlightDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightDefaultedBrushKey}}"
					HighlightDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightDisabledBrushKey}}"
					HighlightHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightHoverBrushKey}}"
					HighlightPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightPressedBrushKey}}"
					InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderNormalBrushKey}}"
					InnerBorderBrushDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderDefaultedBrushKey}}"
					InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderDisabledBrushKey}}"
					InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderHoverBrushKey}}"
					InnerBorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderPressedBrushKey}}"
					InnerBorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderNormalThicknessKey}}"
					IsAnimationEnabled="{TemplateBinding themes:ThemeProperties.IsAnimationEnabled}"
					BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonElementChromeBorderStyleKey}}"
					SnapsToDevicePixels="True" CornerRadius="3,0,0,3" Focusable="False">
				<ContentPresenter Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True"
						SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
			</controlsPrimitives:ElementChrome>
			<controlsPrimitives:ElementChrome x:Name="PART_IndicatorArea" Grid.Column="1" Grid.ColumnSpan="2"
					Background="{TemplateBinding Background}"
					BackgroundDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundDefaultedBrushKey}}"
					BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundDisabledBrushKey}}"
					BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundHoverBrushKey}}"
					BackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundPressedBrushKey}}"
					BorderBrush="{TemplateBinding BorderBrush}"
					BorderBrushDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderDefaultedBrushKey}}"
					BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderDisabledBrushKey}}"
					BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderHoverBrushKey}}"
					BorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderPressedBrushKey}}"
					BorderThickness="{TemplateBinding BorderThickness}"
					Highlight="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightNormalBrushKey}}"
					HighlightDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightDefaultedBrushKey}}"
					HighlightDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightDisabledBrushKey}}"
					HighlightHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightHoverBrushKey}}"
					HighlightPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightPressedBrushKey}}"
					InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderNormalBrushKey}}"
					InnerBorderBrushDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderDefaultedBrushKey}}"
					InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderDisabledBrushKey}}"
					InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderHoverBrushKey}}"
					InnerBorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderPressedBrushKey}}"
					InnerBorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderNormalThicknessKey}}"
					IsAnimationEnabled="{TemplateBinding themes:ThemeProperties.IsAnimationEnabled}"
					BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonElementChromeBorderStyleKey}}" SnapsToDevicePixels="True"
					CornerRadius="0,3,3,0" Focusable="False" ToolTip="{TemplateBinding PopupIndicatorToolTip}">
				<ContentPresenter Content="{TemplateBinding PopupIndicator}" ContentTemplate="{TemplateBinding PopupIndicatorTemplate}"
						HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="true" />
			</controlsPrimitives:ElementChrome>
		</Grid>

		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition SourceName="contentArea" Property="State" Value="Normal" />
					<Condition SourceName="PART_IndicatorArea" Property="State" Value="Normal" />
					<Condition Property="IsTransparencyModeEnabled" Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="contentArea" Property="Background" Value="Transparent" />
				<Setter TargetName="contentArea" Property="BorderBrush" Value="Transparent" />
				<Setter TargetName="contentArea" Property="Highlight" Value="Transparent" />
				<Setter TargetName="contentArea" Property="InnerBorderBrush" Value="Transparent" />
				<Setter TargetName="PART_IndicatorArea" Property="Background" Value="Transparent" />
				<Setter TargetName="PART_IndicatorArea" Property="BorderBrush" Value="Transparent" />
				<Setter TargetName="PART_IndicatorArea" Property="Highlight" Value="Transparent" />
				<Setter TargetName="PART_IndicatorArea" Property="InnerBorderBrush" Value="Transparent" />
			</MultiTrigger>
			<Trigger Property="IsKeyboardFocused" Value="true">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundDefaultedBrushKey}}" />
				<Setter TargetName="contentArea" Property="State" Value="Defaulted" />
			</Trigger>
			<Trigger Property="IsDefaulted" Value="true">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundDefaultedBrushKey}}" />
				<Setter TargetName="contentArea" Property="State" Value="Defaulted" />
				<Setter TargetName="PART_IndicatorArea" Property="State" Value="Defaulted" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundHoverBrushKey}}" />
				<Setter TargetName="contentArea" Property="State" Value="Hover" />
				<Setter TargetName="PART_IndicatorArea" Property="State" Value="Hover" />
			</Trigger>
			<Trigger Property="IsPressed" Value="true">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundPressedBrushKey}}" />
				<Setter TargetName="contentArea" Property="State" Value="Pressed" />
			</Trigger>
			<Trigger Property="IsPopupOpen" Value="true">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundPressedBrushKey}}" />
				<Setter TargetName="contentArea" Property="State" Value="Pressed" />
				<Setter TargetName="PART_IndicatorArea" Property="State" Value="Pressed" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
				<Setter TargetName="contentArea" Property="State" Value="Disabled" />
				<Setter TargetName="PART_IndicatorArea" Property="State" Value="Disabled" />
			</Trigger>
			<Trigger Property="DisplayMode" Value="ButtonOnly">
				<Setter TargetName="PART_IndicatorArea" Property="Visibility" Value="Collapsed" />
				<Setter TargetName="contentArea" Property="CornerRadius" Value="3" />
			</Trigger>
			<Trigger Property="DisplayMode" Value="PopupOnly">
				<Setter TargetName="contentArea" Property="Visibility" Value="Collapsed" />
				<Setter TargetName="contentColumn" Property="Width" Value="0" />
				<Setter TargetName="indicatorColumn" Property="Width" Value="*" />
				<Setter TargetName="PART_IndicatorArea" Property="CornerRadius" Value="3" />
			</Trigger>
			<Trigger Property="IsRounded" Value="false">
				<Setter TargetName="contentArea" Property="CornerRadius" Value="0" />
				<Setter TargetName="PART_IndicatorArea" Property="CornerRadius" Value="0" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- PopupButtonMergedTemplate -->
	<ControlTemplate x:Key="PopupButtonMergedTemplate" TargetType="{x:Type controls:PopupButton}">
		<controlsPrimitives:ElementChrome x:Name="PART_IndicatorArea"
				Background="{TemplateBinding Background}"
				BackgroundDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundDefaultedBrushKey}}"
				BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundDisabledBrushKey}}"
				BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundHoverBrushKey}}"
				BackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundPressedBrushKey}}"
				BorderBrush="{TemplateBinding BorderBrush}"
				BorderBrushDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderDefaultedBrushKey}}"
				BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderDisabledBrushKey}}"
				BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderHoverBrushKey}}"
				BorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderPressedBrushKey}}"
				BorderThickness="{TemplateBinding BorderThickness}"
				Highlight="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightNormalBrushKey}}"
				HighlightDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightDefaultedBrushKey}}"
				HighlightDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightDisabledBrushKey}}"
				HighlightHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightHoverBrushKey}}"
				HighlightPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonHighlightPressedBrushKey}}"
				InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderNormalBrushKey}}"
				InnerBorderBrushDefaulted="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderDefaultedBrushKey}}"
				InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderDisabledBrushKey}}"
				InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderHoverBrushKey}}"
				InnerBorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderPressedBrushKey}}"
				InnerBorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonInnerBorderNormalThicknessKey}}"
				IsAnimationEnabled="{TemplateBinding themes:ThemeProperties.IsAnimationEnabled}"
				BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonElementChromeBorderStyleKey}}" SnapsToDevicePixels="True"
				CornerRadius="3">
			<Grid SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>
				<ContentPresenter Grid.Column="0" Margin="{TemplateBinding Padding}"
						VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" />
				<ContentPresenter Grid.Column="1" Content="{TemplateBinding PopupIndicator}"
						ContentTemplate="{TemplateBinding PopupIndicatorTemplate}" HorizontalAlignment="Center" VerticalAlignment="Center"
						SnapsToDevicePixels="true" />
			</Grid>
		</controlsPrimitives:ElementChrome>
	
		<ControlTemplate.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition SourceName="PART_IndicatorArea" Property="State" Value="Normal" />
					<Condition Property="IsTransparencyModeEnabled" Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_IndicatorArea" Property="Background" Value="Transparent" />
				<Setter TargetName="PART_IndicatorArea" Property="BorderBrush" Value="Transparent" />
				<Setter TargetName="PART_IndicatorArea" Property="Highlight" Value="Transparent" />
				<Setter TargetName="PART_IndicatorArea" Property="InnerBorderBrush" Value="Transparent" />
			</MultiTrigger>
			<Trigger Property="IsKeyboardFocused" Value="true">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundDefaultedBrushKey}}" />
				<Setter TargetName="PART_IndicatorArea" Property="State" Value="Defaulted" />
			</Trigger>
			<Trigger Property="IsDefaulted" Value="true">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundDefaultedBrushKey}}" />
				<Setter TargetName="PART_IndicatorArea" Property="State" Value="Defaulted" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundHoverBrushKey}}" />
				<Setter TargetName="PART_IndicatorArea" Property="State" Value="Hover" />
			</Trigger>
			<Trigger Property="IsPopupOpen" Value="true">
				<Setter Property="Foreground"
						Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonForegroundPressedBrushKey}}" />
				<Setter TargetName="PART_IndicatorArea" Property="State" Value="Pressed" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
				<Setter TargetName="PART_IndicatorArea" Property="State" Value="Disabled" />
			</Trigger>
			<Trigger Property="IsRounded" Value="false">
				<Setter TargetName="PART_IndicatorArea" Property="CornerRadius" Value="0" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- EmbeddedPopupButtonDefaultTemplate -->
	<ControlTemplate x:Key="EmbeddedPopupButtonDefaultTemplate" TargetType="{x:Type controls:PopupButton}">
		<Grid SnapsToDevicePixels="true">
			<Grid.ColumnDefinitions>
				<ColumnDefinition x:Name="contentColumn" Width="*" />
				<ColumnDefinition Width="1" MaxWidth="1" />
				<ColumnDefinition x:Name="indicatorColumn" Width="Auto" />
			</Grid.ColumnDefinitions>
			<Border x:Name="contentArea" Grid.Column="0" Grid.ColumnSpan="2" Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
					CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius, Converter={StaticResource CornerRadiusConverter}, ConverterParameter='Left'}"
					SnapsToDevicePixels="true">
				<Grid>
					<Border x:Name="contentInnerBorder" BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderNormalBrushKey}}"
							BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalThicknessKey}}"
							CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="true" />
					<controls:PixelSnapper VerticalRoundMode="CeilingToEven">
						<ContentPresenter x:Name="presenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
								VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
					</controls:PixelSnapper>
				</Grid>
			</Border>
			<Border x:Name="PART_IndicatorArea" Grid.Column="1" Grid.ColumnSpan="2" Background="{TemplateBinding Background}"
					BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
					CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius, Converter={StaticResource CornerRadiusConverter}, ConverterParameter='Right'}"
					SnapsToDevicePixels="true" ToolTip="{TemplateBinding PopupIndicatorToolTip}">
				<Grid>
					<Border x:Name="indicatorInnerBorder" BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderNormalBrushKey}}"
							BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalThicknessKey}}"
							CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="true" />
					<controls:PixelSnapper VerticalRoundMode="CeilingToEven">
						<ContentPresenter x:Name="indicatorPresenter" Margin="1,0" Content="{TemplateBinding PopupIndicator}" ContentTemplate="{TemplateBinding PopupIndicatorTemplate}"
								HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="true" />
					</controls:PixelSnapper>
				</Grid>
			</Border>
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger Property="IsPopupOpen" Value="true">
				<Setter TargetName="PART_IndicatorArea" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedNormalBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedNormalBrushKey}}" />
				<Setter TargetName="indicatorInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderCheckedNormalBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</Trigger>
			<Trigger SourceName="contentArea" Property="IsMouseOver" Value="true">
				<Setter TargetName="contentArea" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}" />
				<Setter TargetName="contentInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</Trigger>
			<Trigger SourceName="PART_IndicatorArea" Property="IsMouseOver" Value="true">
				<Setter TargetName="PART_IndicatorArea" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}" />
				<Setter TargetName="indicatorInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</Trigger>
			<Trigger Property="IsKeyboardFocused" Value="true">
				<Setter TargetName="contentArea" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}" />
				<Setter TargetName="contentInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="DisplayMode" Value="PopupOnly" />
					<Condition Property="IsKeyboardFocused" Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_IndicatorArea" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}" />
				<Setter TargetName="indicatorInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition SourceName="PART_IndicatorArea" Property="IsMouseOver" Value="true" />
					<Condition Property="IsPopupOpen" Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_IndicatorArea" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedHoverBrushKey}}" />
				<Setter TargetName="indicatorInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderCheckedHoverBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="DisplayMode" Value="PopupOnly" />
					<Condition Property="IsKeyboardFocused" Value="true" />
					<Condition Property="IsPopupOpen" Value="true" />
				</MultiTrigger.Conditions>
				<Setter TargetName="PART_IndicatorArea" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedHoverBrushKey}}" />
				<Setter TargetName="indicatorInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderCheckedHoverBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</MultiTrigger>
			<Trigger Property="IsPressed" Value="true">
				<Setter TargetName="contentArea" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundPressedBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderPressedBrushKey}}" />
				<Setter TargetName="contentInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderPressedBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
				<Setter TargetName="presenter" Property="Opacity" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ThemeProperties.DisabledOpacity)}" />
				<Setter TargetName="indicatorPresenter" Property="Opacity" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ThemeProperties.DisabledOpacity)}" />
			</Trigger>
			
			<Trigger Property="DisplayMode" Value="ButtonOnly">
				<Setter TargetName="PART_IndicatorArea" Property="Visibility" Value="Collapsed" />
				<Setter TargetName="contentArea" Property="CornerRadius" Value="{Binding Path=(themes:ThemeProperties.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
			</Trigger>
			<Trigger Property="DisplayMode" Value="PopupOnly">
				<Setter TargetName="contentArea" Property="Visibility" Value="Collapsed" />
				<Setter TargetName="contentColumn" Property="Width" Value="0" />
				<Setter TargetName="indicatorColumn" Property="Width" Value="*" />
				<Setter TargetName="PART_IndicatorArea" Property="CornerRadius" Value="{Binding Path=(themes:ThemeProperties.CornerRadius), RelativeSource={RelativeSource TemplatedParent}}" />
				<Setter TargetName="indicatorPresenter" Property="Margin" Value="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" />
			</Trigger>
			<Trigger Property="IsRounded" Value="false">
				<Setter TargetName="contentArea" Property="CornerRadius" Value="0" />
				<Setter TargetName="PART_IndicatorArea" Property="CornerRadius" Value="0" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- EmbeddedPopupButtonMergedTemplate -->
	<ControlTemplate x:Key="EmbeddedPopupButtonMergedTemplate" TargetType="{x:Type controls:PopupButton}">
		<Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
				CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="true">
			<Grid x:Name="PART_IndicatorArea">
				<Border x:Name="innerBorder" BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderNormalBrushKey}}"
						BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalThicknessKey}}"
						CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="true" />
				<controls:PixelSnapper VerticalRoundMode="CeilingToEven">
					<Grid SnapsToDevicePixels="true" Margin="{TemplateBinding Padding}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<ContentPresenter x:Name="presenter" Grid.Column="0" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<ContentPresenter x:Name="indicatorPresenter" Grid.Column="1" Margin="1,0,0,0" Content="{TemplateBinding PopupIndicator}"
								ContentTemplate="{TemplateBinding PopupIndicatorTemplate}" HorizontalAlignment="Center" VerticalAlignment="Center"
								SnapsToDevicePixels="true" />
					</Grid>
				</controls:PixelSnapper>
			</Grid>
		</Border>

		<ControlTemplate.Triggers>
			<Trigger Property="IsPopupOpen" Value="true">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedNormalBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedNormalBrushKey}}" />
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderCheckedNormalBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="true">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}" />
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</Trigger>
			<Trigger Property="IsKeyboardFocused" Value="true">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}" />
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="true" />
					<Condition Property="IsPopupOpen" Value="true" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedHoverBrushKey}}" />
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderCheckedHoverBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsKeyboardFocused" Value="true" />
					<Condition Property="IsPopupOpen" Value="true" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedHoverBrushKey}}" />
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderCheckedHoverBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</MultiTrigger>
			<Trigger Property="IsPressed" Value="true">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundPressedBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderPressedBrushKey}}" />
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderPressedBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="false">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
				<Setter TargetName="presenter" Property="Opacity" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ThemeProperties.DisabledOpacity)}" />
				<Setter TargetName="indicatorPresenter" Property="Opacity" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ThemeProperties.DisabledOpacity)}" />
			</Trigger>

			<Trigger Property="IsRounded" Value="false">
				<Setter TargetName="innerBorder" Property="CornerRadius" Value="0" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- 
	
	STYLES
	
	-->

	<!-- ButtonFocusVisualStyle -->
	<Style x:Key="ButtonFocusVisualStyle">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="2" StrokeThickness="1"
							Stroke="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}"
							StrokeDashArray="1 2" SnapsToDevicePixels="true" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- controls:PopupButton -->
	<Style x:Key="{x:Type controls:PopupButton}" TargetType="{x:Type controls:PopupButton}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />
		
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="Padding" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonPaddingNormalThicknessKey}}" />

		<Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisualStyle}" />

		<Setter Property="themes:ThemeProperties.IsAnimationEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonIsAnimationEnabledBooleanKey}}" />
		<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderNormalCornerRadiusKey}}" />
		
		<Setter Property="Template" Value="{StaticResource PopupButtonDefaultTemplate}" />

		<!-- Bind the DataContext used for the ContextMeu, to the DataContext for the PopupButton. -->
		<Setter Property="PopupMenuDataContext" Value="{Binding}" />

		<Style.Triggers>
			<!-- Change the control template when the display mode is set to Merged. -->
			<Trigger Property="DisplayMode" Value="Merged">
				<Setter Property="Template" Value="{StaticResource PopupButtonMergedTemplate}" />
			</Trigger>
			<Trigger Property="themes:ThemeProperties.CornerRadius" Value="0">
				<Setter Property="IsRounded" Value="False" />
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- themes:SharedResourceKeys.EmbeddedPopupButtonStyleKey -->
	<Style x:Key="{x:Static themes:SharedResourceKeys.EmbeddedPopupButtonStyleKey}" TargetType="{x:Type controls:PopupButton}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalThicknessKey}}" />

		<Setter Property="Padding" Value="0" />
		<Setter Property="HorizontalAlignment" Value="Center" />
		<Setter Property="VerticalAlignment" Value="Center" />
		<Setter Property="HorizontalContentAlignment" Value="Center" />
		<Setter Property="VerticalContentAlignment" Value="Center" />

		<Setter Property="themes:ThemeProperties.DisabledOpacity" Value="0.4" />
		
		<Setter Property="SnapsToDevicePixels" Value="True" />

		<Setter Property="Template" Value="{StaticResource EmbeddedPopupButtonDefaultTemplate}" />

		<!-- Bind the DataContext used for the ContextMeu, to the DataContext for the PopupButton. -->
		<Setter Property="PopupMenuDataContext" Value="{Binding}" />
		
		<Setter Property="PopupIndicatorTemplate">
			<Setter.Value>
				<DataTemplate>
					<Path VerticalAlignment="Center" Data="M 0,0 L 2.5,3 L 5,0 Z" SnapsToDevicePixels="True"
							Fill="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarDropDownGlyphBackgroundNormalBrushKey}}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<!-- Change the control template when the display mode is set to Merged. -->
			<Trigger Property="DisplayMode" Value="Merged">
				<Setter Property="Template" Value="{StaticResource EmbeddedPopupButtonMergedTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!-- themes:SharedResourceKeys.EmbeddedPopupButtonOverrideStyleKey -->
	<Style x:Key="{x:Static themes:SharedResourceKeys.EmbeddedPopupButtonOverrideStyleKey}" TargetType="{x:Type controls:PopupButton}"
			BasedOn="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedPopupButtonStyleKey}}">
		<Setter Property="OverridesDefaultStyle" Value="true" />
	</Style>

	<!-- themes:SharedResourceKeys.ToolBarEmbeddedPopupButtonStyleKey -->
	<Style x:Key="{x:Static themes:SharedResourceKeys.ToolBarEmbeddedPopupButtonStyleKey}" TargetType="{x:Type controls:PopupButton}"
			BasedOn="{StaticResource {x:Static themes:SharedResourceKeys.EmbeddedPopupButtonStyleKey}}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalBrushKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundNormalBrushKey}}" />

		<Setter Property="Focusable" Value="True" />
		<Setter Property="IsTabStop" Value="True" />
		
		<Setter Property="themes:ThemeProperties.CornerRadius"
				Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalCornerRadiusKey}}" />
		<Setter Property="Padding" Value="2" />
	</Style>

</ResourceDictionary>
