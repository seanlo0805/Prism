<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
    xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
    xmlns:ribbon="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon;assembly=ActiproSoftware.Ribbon.Wpf"
    xmlns:ribbonControls="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls;assembly=ActiproSoftware.Ribbon.Wpf"
    xmlns:ribbonInput="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Input;assembly=ActiproSoftware.Ribbon.Wpf"
    xmlns:ribbonUI="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.UI;assembly=ActiproSoftware.Ribbon.Wpf"
    >
	
	<!-- ComboBoxItemStyle -->
    <Style x:Key="ComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Static themes:SharedResourceKeys.ComboBoxItemStyleKey}}">
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundNormalBrushKey}}"/>
    </Style>
	
	<!-- ComboBoxCoreEditableTemplate -->
	<ControlTemplate x:Key="ComboBoxCoreEditableTemplate" TargetType="ribbonControls:ComboBox">
		<ControlTemplate.Resources>
			<shared:IsNullOrEmptyConverter x:Key="IsNullOrEmptyConverter" />
		</ControlTemplate.Resources>
		
		<Grid SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*" />
				<ColumnDefinition Width="Auto" />
			</Grid.ColumnDefinitions>
			
			<Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" Placement="Bottom" Margin="1" 
				   IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
				   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
				<shared:DropShadowChrome x:Name="DropShadow" Color="Transparent" 
					MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True">
					<Border x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}" Background="{DynamicResource {x:Static themes:AssetResourceKeys.PopupBackgroundNormalBrushKey}}"
							BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.PopupBorderNormalBrushKey}}"
							BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.PopupBorderNormalThicknessKey}}">
						<ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto"
									  Style="{DynamicResource {x:Static themes:SharedResourceKeys.ScrollViewerStyleKey}}">
							<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"
											SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</ScrollViewer>
					</Border>
				</shared:DropShadowChrome>
			</Popup>
			
			<Border x:Name="Border" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
				BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />

			<Border x:Name="ButtonPartBackground" Grid.Column="1" Background="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" 
					CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownBorderNormalCornerRadiusKey}}" Visibility="Collapsed" />
			
			<ToggleButton x:Name="ToggleButton" Grid.Column="1" OverridesDefaultStyle="True" IsTabStop="False" Focusable="False" ClickMode="Press"
						  IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
				<ToggleButton.Template>
					<ControlTemplate TargetType="{x:Type ToggleButton}">
						<Border x:Name="ButtonOuterBorder" Grid.Column="1" Background="Transparent" BorderThickness="1"
								CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownBorderNormalCornerRadiusKey}}">
							<Border x:Name="ButtonInnerBorder" BorderThickness="1" 
									CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.DropDownBorderNormalCornerRadiusKey}}">
								<Path x:Name="DropDownArrow" Margin="3" VerticalAlignment="Center" 
									Fill="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarDropDownGlyphBackgroundNormalBrushKey}}" 
									Data="M 0,0 L 2.5,3 L 5,0 Z" SnapsToDevicePixels="True" />
							</Border>
						</Border>
						
						<ControlTemplate.Triggers>
							<Trigger Property="Tag" Value="IsPointerOver">
								<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditDropDownButtonBorderHoverBrushKey}}" />
								<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
								<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
							</Trigger>
							<Trigger Property="Tag" Value="IsKeyboardFocusWithin">
								<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditDropDownButtonBorderPressedBrushKey}}" />
								<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
								<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
							</Trigger>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditDropDownButtonBorderHoverBrushKey}}" />
								<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
								<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
							</Trigger>
							<Trigger Property="IsChecked" Value="True">
								<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditDropDownButtonBorderPressedBrushKey}}" />
								<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundOpenedBrushKey}}" />
								<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderOpenedBrushKey}}" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</ToggleButton.Template>
			</ToggleButton>
			
            <TextBox x:Name="PART_EditableTextBox"
                     Margin="2,0,1,0"
					 AllowDrop="True" 
					 Foreground="{TemplateBinding Foreground}"
					 FocusVisualStyle="{x:Null}" 
                     IsReadOnly="{Binding Path=IsReadOnly,RelativeSource={RelativeSource TemplatedParent}}"
					 MinWidth="0" 
					 MinHeight="0" 
					 OverridesDefaultStyle="True"
                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                     VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                     SpellCheck.IsEnabled="{TemplateBinding SpellCheck.IsEnabled}"
					 >
				<TextBox.Template>
					<ControlTemplate TargetType="{x:Type TextBox}">
						<ScrollViewer x:Name="PART_ContentHost"
									  Focusable="False"
									  HorizontalScrollBarVisibility="Hidden"
									  VerticalScrollBarVisibility="Hidden"
									  Background="Transparent"
									  Style="{DynamicResource {x:Static themes:SharedResourceKeys.ScrollViewerStyleKey}}" />
					</ControlTemplate>
				</TextBox.Template>
			</TextBox>

			<ContentPresenter x:Name="hint" Margin="3,0,2,0" VerticalAlignment="Center" IsHitTestVisible="False"
					Content="{TemplateBinding shared:HintProperties.Hint}" ContentTemplate="{TemplateBinding shared:HintProperties.HintTemplate}"
					ContentTemplateSelector="{TemplateBinding shared:HintProperties.HintTemplateSelector}" Opacity="0.67" Visibility="Collapsed"
					TextBlock.Foreground="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
				<Setter TargetName="DropShadow" Property="Margin" Value="0,0,5,5" />
				<Setter TargetName="DropShadow" Property="Color" Value="#40000000" />
			</Trigger>
			<Trigger Property="HasItems" Value="False">
				<Setter TargetName="dropDownBorder" Property="Height" Value="95" />
			</Trigger>

			<Trigger Property="ribbonUI:RibbonControlService.Context" Value="MenuItem">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundNormalBrushKey}}" />
			</Trigger>
			<Trigger Property="ribbonUI:RibbonControlService.Context" Value="MiniToolBarItem">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundNormalBrushKey}}" />
			</Trigger>
			<Trigger Property="IsPointerOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBackgroundHoverBrushKey}}" />
				<Setter TargetName="ButtonPartBackground" Property="Visibility" Value="Visible" />
				<Setter TargetName="ToggleButton" Property="Tag" Value="IsPointerOver" />
			</Trigger>
			<Trigger Property="IsKeyboardFocusWithin" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBackgroundHoverBrushKey}}" />
				<Setter TargetName="ButtonPartBackground" Property="Visibility" Value="Visible" />
				<Setter TargetName="ToggleButton" Property="Tag" Value="IsKeyboardFocusWithin" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="ribbonUI:RibbonControlService.Context" Value="MenuItem" />
					<Condition Property="IsPointerOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="ribbonUI:RibbonControlService.Context" Value="MenuItem" />
					<Condition Property="IsKeyboardFocusWithin" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="ribbonUI:RibbonControlService.Context" Value="MiniToolBarItem" />
					<Condition Property="IsPointerOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundHoverBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="ribbonUI:RibbonControlService.Context" Value="MiniToolBarItem" />
					<Condition Property="IsKeyboardFocusWithin" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundHoverBrushKey}}" />
			</MultiTrigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBorderDisabledBrushKey}}" />
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBackgroundDisabledBrushKey}}" />
				<Setter TargetName="PART_EditableTextBox" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundDisabledBrushKey}}"/>							
			</Trigger>

			<!-- Hint related triggers -->
			<Trigger Property="shared:HintProperties.HasHint" Value="True">
				<Setter TargetName="hint" Property="Visibility" Value="Visible" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="shared:HintProperties.HasContent" Value="False" />
					<Condition Property="IsKeyboardFocusWithin" Value="True" />
				</MultiTrigger.Conditions>
				<MultiTrigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" To=".33" Duration="0:0:0.2" />
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.EnterActions>
				<MultiTrigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" Duration="0:0:0.4" />
						</Storyboard>
					</BeginStoryboard>
				</MultiTrigger.ExitActions>
			</MultiTrigger>
			<Trigger Property="shared:HintProperties.HasContent" Value="True">
				<Trigger.EnterActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.EnterActions>
				<Trigger.ExitActions>
					<BeginStoryboard>
						<Storyboard>
							<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" Duration="0:0:0.4" />
						</Storyboard>
					</BeginStoryboard>
				</Trigger.ExitActions>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- ribbonControls:ComboBox -->
	<Style x:Key="{x:Type ribbonControls:ComboBox}" TargetType="ribbonControls:ComboBox">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditForegroundNormalBrushKey}}" />
		
		<Setter Property="FocusVisualStyle" Value="{x:Null}" />
		<Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItemStyle}" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlSmallHeight}"/>
		<Setter Property="HorizontalContentAlignment" Value="Left" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBorderNormalCornerRadiusKey}}" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ribbonControls:ComboBox">
					<ControlTemplate.Resources>
						<shared:IsNullOrEmptyConverter x:Key="IsNullOrEmptyConverter" />
					</ControlTemplate.Resources>

					<Grid SnapsToDevicePixels="True">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						
						<Popup x:Name="PART_Popup" AllowsTransparency="True" Grid.ColumnSpan="2" Placement="Bottom" Margin="1" 
							   IsOpen="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}"
							   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
			                <shared:DropShadowChrome x:Name="DropShadow" Color="Transparent" 
								MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True">
								<Border x:Name="dropDownBorder" MaxHeight="{TemplateBinding MaxDropDownHeight}"
										Background="{DynamicResource {x:Static themes:AssetResourceKeys.PopupBackgroundNormalBrushKey}}"
										BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.PopupBorderNormalBrushKey}}"
										BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.PopupBorderNormalThicknessKey}}">
									<ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto"
												  Style="{DynamicResource {x:Static themes:SharedResourceKeys.ScrollViewerStyleKey}}">
										<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
									</ScrollViewer>
								</Border>
							</shared:DropShadowChrome>
						</Popup>
						
						<Border x:Name="Border" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
							BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />

						<Border x:Name="ButtonPartBackground" Grid.Column="1" Background="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" 
								CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarDropDownBorderNormalCornerRadiusKey}}" Visibility="Collapsed" />
						
						<ToggleButton OverridesDefaultStyle="True" IsTabStop="False" Focusable="False" ClickMode="Press" 
							IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
							<ToggleButton.Template>
								<ControlTemplate TargetType="{x:Type ToggleButton}">
									<Rectangle Fill="Transparent" />
								</ControlTemplate>								
							</ToggleButton.Template>
						</ToggleButton>
						
						<ToggleButton x:Name="ToggleButton" Grid.Column="1" OverridesDefaultStyle="True" IsTabStop="False" Focusable="False" ClickMode="Press"
							IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
							<ToggleButton.Template>
								<ControlTemplate TargetType="{x:Type ToggleButton}">
									<Border x:Name="ButtonOuterBorder" Grid.Column="1" Background="Transparent" BorderThickness="1"
											CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarDropDownBorderNormalCornerRadiusKey}}">
										<Border x:Name="ButtonInnerBorder" BorderThickness="1"
												CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarDropDownBorderNormalCornerRadiusKey}}">
											<Path x:Name="DropDownArrow" Margin="3" VerticalAlignment="Center" 
												Fill="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarDropDownGlyphBackgroundNormalBrushKey}}" 
												Data="M 0,0 L 2.5,3 L 5,0 Z" SnapsToDevicePixels="True" />
										</Border>
									</Border>
									
									<ControlTemplate.Triggers>
										<Trigger Property="Tag" Value="IsPointerOver">
											<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditDropDownButtonBorderHoverBrushKey}}" />
											<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
											<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
										</Trigger>
										<Trigger Property="Tag" Value="IsKeyboardFocusWithin">
											<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditDropDownButtonBorderPressedBrushKey}}" />
											<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
											<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
										</Trigger>
										<Trigger Property="IsMouseOver" Value="True">
											<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditDropDownButtonBorderHoverBrushKey}}" />
											<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
											<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}" />
										</Trigger>
										<Trigger Property="IsChecked" Value="True">
											<Setter TargetName="ButtonOuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditDropDownButtonBorderPressedBrushKey}}" />
											<Setter TargetName="ButtonOuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundOpenedBrushKey}}" />
											<Setter TargetName="ButtonInnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderOpenedBrushKey}}" />
										</Trigger>
									</ControlTemplate.Triggers>
								</ControlTemplate>
							</ToggleButton.Template>
						</ToggleButton>
						
						<ContentPresenter IsHitTestVisible="false"
										  Margin="3,1,1,1"
										  Content="{TemplateBinding SelectionBoxItem}"
										  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
										  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
										  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
										  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										  SnapsToDevicePixels="True"/>

						<ContentPresenter x:Name="hint" Margin="3,0,2,0" VerticalAlignment="Center" IsHitTestVisible="False"
								Content="{TemplateBinding shared:HintProperties.Hint}" ContentTemplate="{TemplateBinding shared:HintProperties.HintTemplate}"
								ContentTemplateSelector="{TemplateBinding shared:HintProperties.HintTemplateSelector}" Opacity="0.67" Visibility="Collapsed"
								TextBlock.Foreground="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundDisabledBrushKey}}" />
					</Grid>

					<ControlTemplate.Triggers>
						<Trigger SourceName="PART_Popup" Property="Popup.HasDropShadow" Value="true">
							<Setter TargetName="DropShadow" Property="Margin" Value="0,0,5,5" />
							<Setter TargetName="DropShadow" Property="Color" Value="#40000000" />
						</Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="dropDownBorder" Property="Height" Value="95"/>
                        </Trigger>
						
						<Trigger Property="ribbonUI:RibbonControlService.Context" Value="MenuItem">
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundNormalBrushKey}}" />
						</Trigger>
						<Trigger Property="ribbonUI:RibbonControlService.Context" Value="MiniToolBarItem">
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundNormalBrushKey}}" />
						</Trigger>
						<Trigger Property="IsPointerOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBackgroundHoverBrushKey}}" />
							<Setter TargetName="ButtonPartBackground" Property="Visibility" Value="Visible" />
							<Setter TargetName="ToggleButton" Property="Tag" Value="IsPointerOver" />
						</Trigger>
						<Trigger Property="IsKeyboardFocusWithin" Value="True">
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBackgroundHoverBrushKey}}" />
							<Setter TargetName="ButtonPartBackground" Property="Visibility" Value="Visible" />
							<Setter TargetName="ToggleButton" Property="Tag" Value="IsKeyboardFocusWithin" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ribbonUI:RibbonControlService.Context" Value="MenuItem" />
								<Condition Property="IsPointerOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundHoverBrushKey}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ribbonUI:RibbonControlService.Context" Value="MenuItem" />
								<Condition Property="IsKeyboardFocusWithin" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundHoverBrushKey}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ribbonUI:RibbonControlService.Context" Value="MiniToolBarItem" />
								<Condition Property="IsPointerOver" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundHoverBrushKey}}" />
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="ribbonUI:RibbonControlService.Context" Value="MiniToolBarItem" />
								<Condition Property="IsKeyboardFocusWithin" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuEditBackgroundHoverBrushKey}}" />
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBorderDisabledBrushKey}}" />
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarEditBackgroundDisabledBrushKey}}" />
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundDisabledBrushKey}}"/>
						</Trigger>

						<!-- Hint related triggers -->
						<Trigger Property="shared:HintProperties.HasHint" Value="True">
							<Setter TargetName="hint" Property="Visibility" Value="Visible" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="shared:HintProperties.HasContent" Value="False" />
								<Condition Property="IsKeyboardFocusWithin" Value="True" />
							</MultiTrigger.Conditions>
							<MultiTrigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" To=".33" Duration="0:0:0.2" />
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.EnterActions>
							<MultiTrigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" Duration="0:0:0.4" />
									</Storyboard>
								</BeginStoryboard>
							</MultiTrigger.ExitActions>
						</MultiTrigger>
						<Trigger Property="shared:HintProperties.HasContent" Value="True">
							<Trigger.EnterActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.EnterActions>
							<Trigger.ExitActions>
								<BeginStoryboard>
									<Storyboard>
										<DoubleAnimation Storyboard.TargetName="hint" Storyboard.TargetProperty="Opacity" Duration="0:0:0.4" />
									</Storyboard>
								</BeginStoryboard>
							</Trigger.ExitActions>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<Trigger Property="IsEditable" Value="True">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />
				<Setter Property="IsTabStop" Value="false" />
				<Setter Property="Template" Value="{StaticResource ComboBoxCoreEditableTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>

</ResourceDictionary>