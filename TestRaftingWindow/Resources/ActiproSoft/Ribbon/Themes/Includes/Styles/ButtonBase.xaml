<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:systemComponentModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework"
    xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
    xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
    xmlns:ribbon="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon;assembly=ActiproSoftware.Ribbon.Wpf"
    xmlns:ribbonControls="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls;assembly=ActiproSoftware.Ribbon.Wpf"
    xmlns:ribbonControlsPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls.Primitives;assembly=ActiproSoftware.Ribbon.Wpf"
    xmlns:ribbonInput="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Input;assembly=ActiproSoftware.Ribbon.Wpf"
    xmlns:ribbonUI="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.UI;assembly=ActiproSoftware.Ribbon.Wpf"
    >
	
	<!-- ButtonBaseLargeTemplate -->
	<ControlTemplate x:Key="ButtonBaseLargeTemplate" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Grid SnapsToDevicePixels="True">
			<Border x:Name="OuterBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" 
					CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />
		
			<Grid Margin="{TemplateBinding Padding}">
				<Grid.RowDefinitions>
					<RowDefinition x:Name="PART_Button" Height="{x:Static ribbonUI:RibbonMeasurements.ButtonBaseLargeIconHeightGridLength}" />
					<RowDefinition Height="*" />
				</Grid.RowDefinitions>

				<Image x:Name="Image" Margin="3,0,3,0" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform"
					Source="{TemplateBinding ImageSourceLarge}" SnapsToDevicePixels="True" />
				<ribbonControlsPrimitives:TwoLineLabel x:Name="Label" Grid.Row="1" Margin="3,0,3,0" IsEnabled="{TemplateBinding IsEnabled}" HorizontalAlignment="Center" VerticalAlignment="Top" 
					Label="{TemplateBinding Label}" SnapsToDevicePixels="True" Foreground="{TemplateBinding Foreground}" 
					StateForeground="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}" />
			</Grid>
			
			<Border x:Name="InnerBorder" Margin="1" BorderThickness="{TemplateBinding BorderThickness}"
					CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger Property="ImageSourceLarge" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmall}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="False" />
					<Condition Property="IsPointerOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonLargeBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="IsStateActive" Value="True"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="False" />
					<Condition Property="IsKeyboardFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonLargeBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="IsStateActive" Value="True"/>
			</MultiTrigger>
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonLargeBackgroundCheckedNormalBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedNormalBrushKey}}"/>
				<Setter TargetName="Label" Property="IsStateActive" Value="True"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsPointerOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonLargeBackgroundCheckedHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="IsStateActive" Value="True"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsKeyboardFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonLargeBackgroundCheckedHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="IsStateActive" Value="True"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsPressed" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonLargeBackgroundPressedBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderPressedBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderPressedBrushKey}}"/>
				<Setter TargetName="Label" Property="IsStateActive" Value="True"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>					
	</ControlTemplate>
	
	<!-- ButtonBaseSmallTemplate -->
	<ControlTemplate x:Key="ButtonBaseSmallTemplate" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Grid SnapsToDevicePixels="True">
			<Border x:Name="OuterBorder" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" 
					CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />
			<Border x:Name="InnerBorder" Margin="1" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />
		
			<StackPanel x:Name="PART_Button" Margin="{TemplateBinding Padding}" Orientation="Horizontal" SnapsToDevicePixels="True" 
				HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
				<Image x:Name="Image" Margin="1" VerticalAlignment="Center" Stretch="Uniform" 
					Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Width}" 
					Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Height}" 
					Source="{TemplateBinding ImageSourceSmall}" SnapsToDevicePixels="True" />
				<shared:PixelSnapper>
					<TextBlock x:Name="Label" Margin="3,0,2,0" VerticalAlignment="Center" 
						Text="{TemplateBinding Label}" Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="True" />
				</shared:PixelSnapper>
				<Path x:Name="DropDownArrow" Margin="2,0,3,0" VerticalAlignment="Center" Fill="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarDropDownGlyphBackgroundNormalBrushKey}}" 
					Data="M 0,0 L 2.5,3 L 5,0 Z" SnapsToDevicePixels="True" Visibility="Collapsed" />
			</StackPanel>
		</Grid>

		<ControlTemplate.Triggers>
			<Trigger Property="HasPopup" Value="True">
				<Setter TargetName="DropDownArrow" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="ImageSourceSmall" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceLarge}"/>
			</Trigger>
			<Trigger Property="HasImage" Value="False">
				<Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
				<Setter TargetName="Label" Property="Margin" Value="2,0,2,0" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="VariantSize" Value="Small" />
					<Condition Property="HasImage" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="VariantSize" Value="Collapsed" />
					<Condition Property="HasImage" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
			</MultiTrigger>
			<Trigger Property="HasLabel" Value="False">
				<Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundDisabledBrushKey}}"/>
				<Setter TargetName="DropDownArrow" Property="Fill" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundDisabledBrushKey}}"/>				
			</Trigger>
			
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="False" />
					<Condition Property="IsPointerOver" Value="False" />
					<Condition Property="Context" Value="StatusBarItem" />
				</MultiTrigger.Conditions>
		        <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.StatusBarForegroundNormalBrushKey}}" />
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="False" />
					<Condition Property="IsPointerOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
				<Setter TargetName="DropDownArrow" Property="Fill" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>				
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="False" />
					<Condition Property="IsKeyboardFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
				<Setter TargetName="DropDownArrow" Property="Fill" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>				
			</MultiTrigger>
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedNormalBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedNormalBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
				<Setter TargetName="DropDownArrow" Property="Fill" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>				
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsPointerOver" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
				<Setter TargetName="DropDownArrow" Property="Fill" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>				
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsChecked" Value="True" />
					<Condition Property="IsKeyboardFocused" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundCheckedHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderCheckedHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
				<Setter TargetName="DropDownArrow" Property="Fill" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>				
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsPressed" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundPressedBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderPressedBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderPressedBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
				<Setter TargetName="DropDownArrow" Property="Fill" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>				
			</MultiTrigger>
		</ControlTemplate.Triggers>					
	</ControlTemplate>
	
	<!-- ButtonBaseMenuItemLargeTemplate -->
	<ControlTemplate x:Key="ButtonBaseMenuItemLargeTemplate" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Grid SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeIconColumnWidthGridLength}" SharedSizeGroup="LargeMenuItemIconColumnGroup"/>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargePopupColumnWidthGridLength}"/>
			</Grid.ColumnDefinitions>

			<Border x:Name="OuterBorder" Grid.ColumnSpan="3" BorderThickness="{TemplateBinding BorderThickness}"
					CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />
			<Border x:Name="Background" Grid.ColumnSpan="3" Margin="1" Background="{TemplateBinding Background}" 
					CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />
			<Border x:Name="InnerBorder" Grid.ColumnSpan="3" Margin="1" BorderThickness="{TemplateBinding BorderThickness}"
					CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />
			
			<Border x:Name="ImageBorder" Margin="2" Width="36" Height="36" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="True"
					BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBorderNormalThicknessKey}}"
					CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBorderNormalCornerRadiusKey}}">
				<Grid>
					<Image x:Name="Image" Width="32" Height="32" VerticalAlignment="Center"
						Source="{TemplateBinding ImageSourceLarge}" Stretch="Uniform" />
					<Path x:Name="Checkmark" Data="M 0,5 L 3.5,10 L 7,0 L 6,0 L 3.5,8 L 1,5 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
						Fill="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundNormalBrushKey}}" SnapsToDevicePixels="True" FlowDirection="LeftToRight" />
					<Rectangle x:Name="IndeterminateCheckmark" Width="8" Height="8" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
						Fill="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundNormalBrushKey}}" SnapsToDevicePixels="True" FlowDirection="LeftToRight" />
				</Grid>
			</Border>
			
			<shared:PixelSnapper x:Name="LabelStackPanel" Grid.Column="1" Margin="5,0,5,0" VerticalAlignment="Top" VerticalRoundMode="CeilingToEven">
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="Auto" />
					</Grid.RowDefinitions>
				
					<ribbonControlsPrimitives:AccessTextBlock x:Name="Label" Margin="0,3,0,0" FontWeight="Bold" SnapsToDevicePixels="True" 
									 Label="{TemplateBinding Label}" KeyTipAccessText="{TemplateBinding KeyTipAccessText}" Foreground="{TemplateBinding Foreground}" />
					<TextBlock x:Name="MenuItemDescription" Margin="0,2,0,3" LineHeight="{Binding RelativeSource={RelativeSource Self}, Path=FontSize}" 
							   LineStackingStrategy="BlockLineHeight" Grid.Row="1" TextWrapping="Wrap" Text="{TemplateBinding MenuItemDescription}" Foreground="{TemplateBinding Foreground}" SnapsToDevicePixels="True" />
				</Grid>
			</shared:PixelSnapper>
			
			<Path x:Name="SubmenuArrow" Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
				Fill="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemPopupGlyphBackgroundNormalBrushKey}}" Data="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=MenuItemRightArrow}}" SnapsToDevicePixels="True" />
		</Grid>
		
		<ControlTemplate.Triggers>
			<Trigger Property="HasPopup" Value="True">
				<Setter TargetName="SubmenuArrow" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="ImageSourceLarge" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmall}"/>
			</Trigger>
			<Trigger Property="MenuItemDescription" Value="{x:Null}">
				<Setter TargetName="LabelStackPanel" Property="VerticalAlignment" Value="Center" />
				<Setter TargetName="Label" Property="Margin" Value="0" />
				<Setter TargetName="Label" Property="FontWeight" Value="Normal" />
				<Setter TargetName="MenuItemDescription" Property="Visibility" Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="MenuItemDescription" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="SubmenuArrow" Property="Fill" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
			</Trigger>						
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="ImageBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBorderNormalBrushKey}}"/>
				<Setter TargetName="ImageBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBackgroundNormalBrushKey}}"/>
			</Trigger>						
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="True" />
					<Condition SourceName="Image" Property="Source" Value="{x:Null}" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Checkmark" Property="Visibility" Value="Visible" />
			</MultiTrigger>
			<Trigger Property="IsChecked" Value="{x:Null}">
				<Setter TargetName="ImageBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBorderNormalBrushKey}}"/>
				<Setter TargetName="ImageBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBackgroundNormalBrushKey}}"/>
			</Trigger>						
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="{x:Null}" />
					<Condition SourceName="Image" Property="Source" Value="{x:Null}" />
				</MultiTrigger.Conditions>
				<Setter TargetName="IndeterminateCheckmark" Property="Visibility" Value="Visible" />
			</MultiTrigger>
			
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Background" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonLargeBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
				<Setter TargetName="MenuItemDescription" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
				<Setter TargetName="SubmenuArrow" Property="Fill" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="False" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Background" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonLargeBackgroundDisabledBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderDisabledBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderDisabledBrushKey}}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- ButtonBaseMenuItemSmallTemplate -->
	<ControlTemplate x:Key="ButtonBaseMenuItemSmallTemplate" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Grid SnapsToDevicePixels="True">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallIconColumnWidthGridLength}" SharedSizeGroup="MenuItemIconColumnGroup"/>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallPopupColumnWidthGridLength}"/>
			</Grid.ColumnDefinitions>

			<Border BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemIconColumnBorderNormalThicknessKey}}" SnapsToDevicePixels="True" 
				BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemIconColumnBorderNormalBrushKey}}" 
				Background="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemIconColumnBackgroundNormalBrushKey}}" />
			
			<Border x:Name="OuterBorder" Grid.ColumnSpan="3" BorderThickness="{TemplateBinding BorderThickness}"
					CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />
			<Border x:Name="Background" Grid.ColumnSpan="3" Margin="1" Background="{TemplateBinding Background}" 
					CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />
			<Border x:Name="InnerBorder" Grid.ColumnSpan="3" Margin="1" BorderThickness="{TemplateBinding BorderThickness}"
					CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True" />
			
			<Border x:Name="ImageBorder" Margin="2" Width="20" Height="20" HorizontalAlignment="Left" VerticalAlignment="Center" SnapsToDevicePixels="True"
					BorderThickness="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBorderNormalThicknessKey}}"
					CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBorderNormalCornerRadiusKey}}">
				<Grid>
					<Image x:Name="Image" HorizontalAlignment="Center" VerticalAlignment="Center"
						Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Width}" 
						Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmallSize.Height}" 
						Source="{TemplateBinding ImageSourceSmall}" Stretch="Uniform" />
					<Path x:Name="Checkmark" Data="M 0,5 L 3.5,10 L 7,0 L 6,0 L 3.5,8 L 1,5 Z" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
						Fill="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundNormalBrushKey}}" SnapsToDevicePixels="True" FlowDirection="LeftToRight" />
					<Rectangle x:Name="IndeterminateCheckmark" Width="8" Height="8" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed"
						Fill="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundNormalBrushKey}}" SnapsToDevicePixels="True" FlowDirection="LeftToRight" />
				</Grid>
			</Border>
			<DockPanel Grid.Column="1" Margin="5,0,5,0">
				<TextBlock x:Name="InputGestureText" DockPanel.Dock="Right" Margin="10,0,0,0" VerticalAlignment="Center" Text="{TemplateBinding InputGestureText}" Foreground="{TemplateBinding Foreground}" />				
				<ribbonControlsPrimitives:AccessTextBlock x:Name="Label" VerticalAlignment="Center" 
						   Label="{TemplateBinding Label}" KeyTipAccessText="{TemplateBinding KeyTipAccessText}" Foreground="{TemplateBinding Foreground}" />
			</DockPanel>
			
			<Path x:Name="SubmenuArrow" Grid.Column="2" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" 
				Fill="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemPopupGlyphBackgroundNormalBrushKey}}" Data="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=MenuItemRightArrow}}" SnapsToDevicePixels="True" />
		</Grid>
		
		<ControlTemplate.Triggers>
			<Trigger Property="HasPopup" Value="True">
				<Setter TargetName="SubmenuArrow" Property="Visibility" Value="Visible" />
			</Trigger>
			<Trigger Property="ImageSourceSmall" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceLarge}"/>
			</Trigger>
			<Trigger Property="InputGestureText" Value="{x:Null}">
				<Setter TargetName="InputGestureText" Property="Visibility" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="ribbonControls:Menu.IsMenuItemInputGestureTextVisible" Value="False">
				<Setter TargetName="InputGestureText" Property="Visibility" Value="Collapsed"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="InputGestureText" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="SubmenuArrow" Property="Fill" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
			</Trigger>						
			<Trigger Property="IsChecked" Value="True">
				<Setter TargetName="ImageBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBorderNormalBrushKey}}"/>
				<Setter TargetName="ImageBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBackgroundNormalBrushKey}}"/>
			</Trigger>						
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="True" />
					<Condition SourceName="Image" Property="Source" Value="{x:Null}" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Checkmark" Property="Visibility" Value="Visible" />
			</MultiTrigger>
			<Trigger Property="IsChecked" Value="{x:Null}">
				<Setter TargetName="ImageBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBorderNormalBrushKey}}"/>
				<Setter TargetName="ImageBorder" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemGlyphBackgroundNormalBrushKey}}"/>
			</Trigger>						
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsChecked" Value="{x:Null}" />
					<Condition SourceName="Image" Property="Source" Value="{x:Null}" />
				</MultiTrigger.Conditions>
				<Setter TargetName="IndeterminateCheckmark" Property="Visibility" Value="Visible" />
			</MultiTrigger>
			
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="True" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Background" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
				<Setter TargetName="InputGestureText" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
				<Setter TargetName="SubmenuArrow" Property="Fill" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsEnabled" Value="False" />
					<Condition Property="IsHighlighted" Value="True" />
				</MultiTrigger.Conditions>
				<Setter TargetName="Background" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundDisabledBrushKey}}" />
				<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderDisabledBrushKey}}"/>
				<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderDisabledBrushKey}}"/>
			</MultiTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- ApplicationMenuFooterButtonTemplate -->
	<ControlTemplate x:Key="ApplicationMenuFooterButtonTemplate" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Border x:Name="Border"  
			Background="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageButtonBackgroundNormalBrushKey}}" 
			BorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageButtonBorderNormalBrushKey}}"
			CornerRadius="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalCornerRadiusKey}}"
			BorderThickness="1" SnapsToDevicePixels="True">
			<Border x:Name="innerBorder" BorderThickness="1" BorderBrush="Transparent">
				<StackPanel Margin="5,2,5,2" Orientation="Horizontal">
					<Image x:Name="Image" Width="16" Height="16" Margin="0,0,3,0" Source="{TemplateBinding ImageSourceSmall}" Stretch="Uniform" />
					<shared:PixelSnapper VerticalAlignment="Center">
						<ribbonControlsPrimitives:AccessTextBlock x:Name="Label" 
								   Label="{TemplateBinding Label}" KeyTipAccessText="{TemplateBinding KeyTipAccessText}" Foreground="{TemplateBinding Foreground}" />
					</shared:PixelSnapper>
				</StackPanel>
			</Border>
		</Border>
		
		<ControlTemplate.Triggers>
			<Trigger Property="ImageSourceSmall" Value="{x:Null}">
				<Setter TargetName="Image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceLarge}"/>
			</Trigger>
			<Trigger Property="HasImage" Value="False">
				<Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderDisabledBrushKey}}"/>
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderDisabledBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundDisabledBrushKey}}"/>
				<Setter TargetName="Image" Property="Opacity" Value="0.4"/>
			</Trigger>						
			<Trigger Property="IsPointerOver" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}" />
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
			</Trigger>
			<Trigger Property="IsKeyboardFocused" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundHoverBrushKey}}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderHoverBrushKey}}" />
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderHoverBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBackgroundPressedBrushKey}}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderPressedBrushKey}}" />
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonInnerBorderPressedBrushKey}}"/>
				<Setter TargetName="Label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundHoverBrushKey}}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	
	<!-- BackstageHeaderButtonTemplate -->
	<ControlTemplate x:Key="BackstageHeaderButtonTemplate" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
			CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius}" SnapsToDevicePixels="True">
			<Border x:Name="innerBorder" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" SnapsToDevicePixels="True">
				<DockPanel Margin="{TemplateBinding Padding}">
					<Image x:Name="image" DockPanel.Dock="Left" Width="16" Height="16" Margin="0,0,6,0" Source="{TemplateBinding ImageSourceSmall}" Stretch="Uniform" />
					<shared:PixelSnapper VerticalAlignment="Center">
						<TextBlock x:Name="label" TextTrimming="CharacterEllipsis" Text="{TemplateBinding Label}" Foreground="{TemplateBinding Foreground}" />
					</shared:PixelSnapper>
				</DockPanel>
			</Border>
		</Border>
		
		<ControlTemplate.Triggers>
			<Trigger Property="themes:ThemeProperties.CornerRadius" Value="0">
				<Setter TargetName="innerBorder" Property="CornerRadius" Value="0" />
			</Trigger>
			<Trigger Property="ImageSourceSmall" Value="{x:Null}">
				<Setter TargetName="image" Property="Source" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceLarge}"/>
			</Trigger>
			<Trigger Property="HasImage" Value="False">
				<Setter TargetName="image" Property="Visibility" Value="Collapsed" />
			</Trigger>
			<Trigger Property="IsPointerOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageTabItemBackgroundHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageTabItemBorderHoverBrushKey}}" />
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageTabItemInnerBorderHoverBrushKey}}" />
				<Setter TargetName="label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageTabItemForegroundHoverBrushKey}}"/>
			</Trigger>
			<Trigger Property="IsKeyboardFocused" Value="True">
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageTabItemBackgroundHoverBrushKey}}" />
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageTabItemBorderHoverBrushKey}}" />
				<Setter TargetName="innerBorder" Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageTabItemInnerBorderHoverBrushKey}}" />
				<Setter TargetName="label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageTabItemForegroundHoverBrushKey}}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter TargetName="label" Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundDisabledBrushKey}}"/>
				<Setter TargetName="image" Property="Opacity" Value="0.4"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	
	<!-- ribbonControls:Button -->
	<Style x:Key="{x:Type ribbonControls:Button}" TargetType="{x:Type ribbonControls:Button}">
		<Setter Property="Background" Value="Transparent" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalThicknessKey}}" />
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundNormalBrushKey}}"/>
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlSmallHeight}"/>
		<Setter Property="MinWidth" Value="14"/>
		<Setter Property="Padding" Value="2"/>
		<Setter Property="SnapsToDevicePixels" Value="True"/>
		<Setter Property="Template" Value="{StaticResource ButtonBaseSmallTemplate}" />
		<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonBorderNormalCornerRadiusKey}}"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="HasLabel" Value="False" />
					<Condition Property="systemComponentModel:DesignerProperties.IsInDesignMode" Value="True" />
				</MultiTrigger.Conditions>
				<Setter Property="ImageSourceSmall" Value="/ActiproSoftware.Ribbon.Wpf;component/Products/Ribbon/Images/ButtonDefault16.png" />
				<Setter Property="ImageSourceLarge" Value="/ActiproSoftware.Ribbon.Wpf;component/Products/Ribbon/Images/ButtonDefault32.png" />
			</MultiTrigger>
			<Trigger Property="VariantSize" Value="Large">
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlLargeHeight}"/>
				<Setter Property="Padding" Value="0"/>
				<Setter Property="Template" Value="{StaticResource ButtonBaseLargeTemplate}" />
			</Trigger>
			<Trigger Property="VariantSize" Value="Collapsed">
				<Setter Property="MinHeight" Value="0"/>				
				<Setter Property="MinWidth" Value="0"/>				
			</Trigger>
			<Trigger Property="Context" Value="MenuItem">
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundNormalBrushKey}}"/>
				<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallHeight}"/>
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemSmallTemplate}" />
				<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemBorderNormalCornerRadiusKey}}"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Context" Value="MenuItem" />
					<Condition Property="VariantSize" Value="Large" />
				</MultiTrigger.Conditions>
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeHeight}"/>				
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemLargeTemplate}" />
			</MultiTrigger>
			<Trigger Property="Context" Value="ApplicationMenuFooterButton">
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundNormalBrushKey}}"/>
				<Setter Property="Margin" Value="3,1,3,1" />
				<Setter Property="Template" Value="{StaticResource ApplicationMenuFooterButtonTemplate}" />
			</Trigger>
			<Trigger Property="Context" Value="BackstageHeaderItem">
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderBrush" Value="Transparent" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageTabItemForegroundNormalBrushKey}}"/>
				<Setter Property="Margin" Value="6,1,6,1" />
				<Setter Property="Padding" Value="13,3,13,3" />
				<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderNormalCornerRadiusKey}}"/>
				<Setter Property="Template" Value="{StaticResource BackstageHeaderButtonTemplate}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Context" Value="BackstageItem" />
					<Condition Property="VariantSize" Value="Large" />
				</MultiTrigger.Conditions>
				<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageButtonBackgroundNormalBrushKey}}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageButtonBorderNormalBrushKey}}"/>
				<Setter Property="FontSize" Value="12"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BackstageTabControlForegroundNormalBrushKey}}" />
				<Setter Property="Height" Value="80"/>
				<Setter Property="Padding" Value="10,8,10,5"/>
				<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ButtonBorderNormalCornerRadiusKey}}"/>
				<Setter Property="Template" Value="{StaticResource ButtonBaseLargeTemplate}" />
				<Setter Property="Width" Value="86"/>
			</MultiTrigger>
			<Trigger Property="Context" Value="StatusBarItem">
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.StatusBarButtonBaseHeight}"/>
				<Setter Property="Padding" Value="0"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	

	<!-- CheckRadioFocusVisual -->
	<Style x:Key="CheckRadioFocusVisual">
		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate>
					<Rectangle Margin="14,0,0,0" StrokeThickness="1"
							Stroke="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" StrokeDashArray="1 2"
							SnapsToDevicePixels="true" />
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ribbonControls:CheckBox -->
	<Style x:Key="{x:Type ribbonControls:CheckBox}" TargetType="{x:Type ribbonControls:CheckBox}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundNormalBrushKey}}"/>

		<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlSmallHeight}"/>
		<Setter Property="Padding" Value="4,0,0,0" />
		<Setter Property="VerticalContentAlignment" Value="Center"/>

		<Setter Property="themes:ThemeProperties.IsAnimationEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletIsAnimationEnabledBooleanKey}}" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ribbonControls:CheckBox}">
					<BulletDecorator Background="Transparent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="true">
						<BulletDecorator.Bullet>
							<shared:CheckChrome x:Name="chrome" Background="{TemplateBinding Background}"
									BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundDisabledBrushKey}}"
									BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundHoverBrushKey}}"
									BackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundPressedBrushKey}}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderDisabledBrushKey}}"
									BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderHoverBrushKey}}"
									BorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderPressedBrushKey}}"
									InnerBackground="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundNormalBrushKey}}"
									InnerBackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundDisabledBrushKey}}"
									InnerBackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundHoverBrushKey}}"
									InnerBackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundPressedBrushKey}}"
									InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderNormalBrushKey}}"
									InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderDisabledBrushKey}}"
									InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderHoverBrushKey}}"
									InnerBorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderPressedBrushKey}}"
									GlyphBackgroundChecked="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBackgroundCheckedNormalBrushKey}}"
									GlyphBackgroundCheckedDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBackgroundCheckedDisabledBrushKey}}"
									GlyphBackgroundCheckedHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBackgroundCheckedHoverBrushKey}}"
									GlyphBackgroundCheckedPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBackgroundCheckedPressedBrushKey}}"
									GlyphBorderBrushChecked="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBorderCheckedNormalBrushKey}}"
									GlyphBorderBrushCheckedDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletSquareGlyphBorderCheckedDisabledBrushKey}}"
									GlyphBackgroundIndeterminate="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateNormalBrushKey}}"
									GlyphBackgroundIndeterminateDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateDisabledBrushKey}}"
									GlyphBackgroundIndeterminateHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateHoverBrushKey}}"
									GlyphBackgroundIndeterminatePressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminatePressedBrushKey}}"
									GlyphBorderBrushIndeterminate="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateNormalBrushKey}}"
									GlyphBorderBrushIndeterminateDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateDisabledBrushKey}}"
									GlyphBorderBrushIndeterminateHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateHoverBrushKey}}"
									GlyphBorderBrushIndeterminatePressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminatePressedBrushKey}}"
									IsAnimationEnabled="{TemplateBinding themes:ThemeProperties.IsAnimationEnabled}"
									IsChecked="{TemplateBinding IsChecked}"
									BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBulletChromeBorderStyleKey}}"
									UseAlternateGeometry="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphUseAlternateGeometryBooleanKey}}" />
						</BulletDecorator.Bullet>
						<TextBlock Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
								   Text="{TemplateBinding Label}" Foreground="{TemplateBinding Foreground}" />
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPointerOver" Value="true">
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsKeyboardFocused" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</MultiTrigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="chrome" Property="State" Value="Pressed" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundDisabledBrushKey}}"/>
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>

			</Setter.Value>
		</Setter>
		
		<Style.Triggers>
			<Trigger Property="Context" Value="MenuItem">
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundNormalBrushKey}}"/>
				<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallHeight}"/>
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemSmallTemplate}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Context" Value="MenuItem" />
					<Condition Property="VariantSize" Value="Large" />
				</MultiTrigger.Conditions>
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeHeight}"/>				
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemLargeTemplate}" />
			</MultiTrigger>
			<Trigger Property="Context" Value="None">
				<Setter Property="MinHeight" Value="0.0"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!-- ribbonControls:RadioButton -->
	<Style x:Key="{x:Type ribbonControls:RadioButton}" TargetType="{x:Type ribbonControls:RadioButton}">	
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ControlForegroundNormalBrushKey}}" />

		<Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlSmallHeight}"/>
		<Setter Property="Padding" Value="4,0,0,0" />
		<Setter Property="VerticalContentAlignment" Value="Center"/>
		
		<Setter Property="themes:ThemeProperties.IsAnimationEnabled" Value="{DynamicResource {x:Static themes:AssetResourceKeys.BulletIsAnimationEnabledBooleanKey}}" />
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ribbonControls:RadioButton}">
					<BulletDecorator Background="Transparent" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
						<BulletDecorator.Bullet>
							<shared:RadioChrome x:Name="chrome" Background="{TemplateBinding Background}"
									BackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundDisabledBrushKey}}"
									BackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundHoverBrushKey}}"
									BackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBackgroundPressedBrushKey}}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderDisabledBrushKey}}"
									BorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderHoverBrushKey}}"
									BorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBorderPressedBrushKey}}"
									InnerBackground="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundNormalBrushKey}}"
									InnerBackgroundDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundDisabledBrushKey}}"
									InnerBackgroundHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundHoverBrushKey}}"
									InnerBackgroundPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBackgroundPressedBrushKey}}"
									InnerBorderBrush="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderNormalBrushKey}}"
									InnerBorderBrushDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderDisabledBrushKey}}"
									InnerBorderBrushHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderHoverBrushKey}}"
									InnerBorderBrushPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletInnerBorderPressedBrushKey}}"
									GlyphBackgroundChecked="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBackgroundCheckedNormalBrushKey}}"
									GlyphBackgroundCheckedDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBackgroundCheckedDisabledBrushKey}}"
									GlyphBackgroundCheckedHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBackgroundCheckedHoverBrushKey}}"
									GlyphBackgroundCheckedPressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBackgroundCheckedPressedBrushKey}}"
									GlyphBorderBrushChecked="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBorderCheckedNormalBrushKey}}"
									GlyphBorderBrushCheckedDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletRoundGlyphBorderCheckedDisabledBrushKey}}"
									GlyphBackgroundIndeterminate="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateNormalBrushKey}}"
									GlyphBackgroundIndeterminateDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateDisabledBrushKey}}"
									GlyphBackgroundIndeterminateHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminateHoverBrushKey}}"
									GlyphBackgroundIndeterminatePressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBackgroundIndeterminatePressedBrushKey}}"
									GlyphBorderBrushIndeterminate="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateNormalBrushKey}}"
									GlyphBorderBrushIndeterminateDisabled="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateDisabledBrushKey}}"
									GlyphBorderBrushIndeterminateHover="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminateHoverBrushKey}}"
									GlyphBorderBrushIndeterminatePressed="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphBorderIndeterminatePressedBrushKey}}"
									IsAnimationEnabled="{TemplateBinding themes:ThemeProperties.IsAnimationEnabled}"
									IsChecked="{TemplateBinding IsChecked}"
									BorderStyle="{DynamicResource {x:Static themes:AssetResourceKeys.BulletBulletChromeBorderStyleKey}}"
									UseAlternateGeometry="{DynamicResource {x:Static themes:AssetResourceKeys.BulletGlyphUseAlternateGeometryBooleanKey}}" />
						</BulletDecorator.Bullet>
						<TextBlock Margin="{TemplateBinding Padding}" 
								HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Text="{TemplateBinding Label}" Foreground="{TemplateBinding Foreground}" />
					</BulletDecorator>
					<ControlTemplate.Triggers>
						<Trigger Property="IsPointerOver" Value="true">
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsEnabled" Value="True" />
								<Condition Property="IsKeyboardFocused" Value="True" />
							</MultiTrigger.Conditions>
							<Setter TargetName="chrome" Property="State" Value="Hover" />
						</MultiTrigger>
						<Trigger Property="IsPressed" Value="true">
							<Setter TargetName="chrome" Property="State" Value="Pressed" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.ToolBarButtonForegroundDisabledBrushKey}}"/>
							<Setter TargetName="chrome" Property="State" Value="Disabled" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		
		<Style.Triggers>
			<Trigger Property="Context" Value="MenuItem">
				<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundNormalBrushKey}}"/>
				<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallHeight}"/>
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemSmallTemplate}" />
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="Context" Value="MenuItem" />
					<Condition Property="VariantSize" Value="Large" />
				</MultiTrigger.Conditions>
				<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeHeight}"/>				
				<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemLargeTemplate}" />
			</MultiTrigger>
			<Trigger Property="Context" Value="None">
				<Setter Property="MinHeight" Value="0.0"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!-- RibbonControlsButtonLargeStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsButtonLargeStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.RibbonControlLargeHeight}"/>
		<Setter Property="Template" Value="{StaticResource ButtonBaseLargeTemplate}" />
	</Style>
	
	<!-- RibbonControlsButtonCollapsedStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsButtonCollapsedStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="MinHeight" Value="0"/>				
		<Setter Property="MinWidth" Value="0"/>				
	</Style>
	
	<!-- RibbonControlsButtonBaseMenuItemLargeStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsButtonBaseMenuItemLargeStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundNormalBrushKey}}"/>
		<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemLargeHeight}"/>
		<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemLargeTemplate}" />
	</Style>
	
	<!-- RibbonControlsButtonBaseMenuItemSmallStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsButtonBaseMenuItemSmallStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.MenuItemForegroundNormalBrushKey}}"/>
		<Setter Property="KeyboardNavigation.AcceptsReturn" Value="True" />
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.MenuItemSmallHeight}"/>
		<Setter Property="Template" Value="{StaticResource ButtonBaseMenuItemSmallTemplate}" />
	</Style>
	
	<!-- RibbonControlsButtonStatusBarStyle (Used as workaround for VS 2008 Style.Triggers bug) -->
	<Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type ribbon:Ribbon},ResourceId=RibbonControlsButtonStatusBarStyle}" TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">
		<Setter Property="MinHeight" Value="{x:Static ribbonUI:RibbonMeasurements.StatusBarButtonBaseHeight}"/>				
		<Setter Property="Padding" Value="0"/>
	</Style>
	
</ResourceDictionary>