<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
		xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
		xmlns:docking="clr-namespace:ActiproSoftware.Windows.Controls.Docking;assembly=ActiproSoftware.Docking.Wpf"
		xmlns:dockingPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Docking.Primitives;assembly=ActiproSoftware.Docking.Wpf"
		>

	<!-- Converters -->
	<shared:CornerRadiusConverter x:Key="CornerRadiusConverter" />
	<shared:IsTypeConverter x:Key="IsTypeConverter" />
	<shared:ThicknessConverter x:Key="ThicknessConverter" />

	<!-- 
	
		STYLES
	
	-->

	<!-- dockingPrimitives:AutoHideTabItem -->
	<Style x:Key="{x:Type dockingPrimitives:AutoHideTabItem}" TargetType="{x:Type dockingPrimitives:AutoHideTabItem}">
		<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.AutoHideTabItemBackgroundNormalBrushKey}}" />
		<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.AutoHideTabItemBorderNormalBrushKey}}" />
		<Setter Property="BorderThickness" Value="{DynamicResource {x:Static themes:AssetResourceKeys.AutoHideTabItemBorderNormalThicknessKey}}" />
		<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.AutoHideTabItemForegroundNormalBrushKey}}" />

		<Setter Property="Margin" Value="{DynamicResource {x:Static themes:AssetResourceKeys.AutoHideTabItemMarginNormalThicknessKey}}" />
		<Setter Property="Padding" Value="2" />
		<!-- 9/11/2015 - Changed CornerRadius to use this new asset resource since other CornerRadius asset resource values are changing for Docking vNext -->
		<Setter Property="themes:ThemeProperties.CornerRadius" Value="{DynamicResource {x:Static themes:AssetResourceKeys.TabbedMdiContainerTabControlBorderHighlightedCornerRadiusKey}}" />

		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="dockingPrimitives:AutoHideTabItem">
					<shared:TintableBorder x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
							BorderThickness="{TemplateBinding BorderThickness, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left,Top,Right'}"
							CornerRadius="{TemplateBinding themes:ThemeProperties.CornerRadius, Converter={StaticResource CornerRadiusConverter}, ConverterParameter='Top'}"
							TintColor="{Binding TabTintColor}" SnapsToDevicePixels="True">
						<StackPanel Margin="{TemplateBinding Padding}" Orientation="Horizontal">
							<Image x:Name="image" Margin="0,0,4,0" Width="16" Height="16" Source="{Binding ImageSource}" Stretch="Uniform"
									VerticalAlignment="Center" SnapsToDevicePixels="True" />
							<shared:PixelSnapper VerticalAlignment="Center">
								<Grid>
									<TextBlock x:Name="title" Text="{Binding Title}" Visibility="Collapsed" />
									<ContentPresenter x:Name="contentPresenter" />
								</Grid>
							</shared:PixelSnapper>
						</StackPanel>
					</shared:TintableBorder>

					<ControlTemplate.Triggers>
						<Trigger Property="docking:DockSite.ToolWindowsHaveImagesOnTabs" Value="False">
							<Setter TargetName="image" Property="Margin" Value="0" />
							<Setter TargetName="image" Property="Visibility" Value="Hidden" />
							<Setter TargetName="image" Property="Width" Value="0" />
						</Trigger>
						<DataTrigger Binding="{Binding ImageSource}" Value="{x:Null}">
							<Setter TargetName="image" Property="Margin" Value="0" />
							<Setter TargetName="image" Property="Visibility" Value="Hidden" />
							<Setter TargetName="image" Property="Width" Value="0" />
						</DataTrigger>
						<Trigger Property="dockingPrimitives:AutoHideTabStrip.Dock" Value="Top">
							<Setter TargetName="border" Property="Background" Value="{Binding BackgroundOpposite, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter TargetName="border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left,Right,Bottom'}" />
							<Setter TargetName="border" Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ThemeProperties.CornerRadius), Converter={StaticResource CornerRadiusConverter}, ConverterParameter='Bottom'}" />
						</Trigger>
						<Trigger Property="dockingPrimitives:AutoHideTabStrip.Dock" Value="Right">
							<Setter TargetName="border" Property="Background" Value="{Binding BackgroundOpposite, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter TargetName="border" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessConverter}, ConverterParameter='Left,Right,Bottom'}" />
							<Setter TargetName="border" Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(themes:ThemeProperties.CornerRadius), Converter={StaticResource CornerRadiusConverter}, ConverterParameter='Bottom'}" />
							<Setter TargetName="title" Property="RenderTransform">
								<Setter.Value>
									<TranslateTransform Y="1" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="dockingPrimitives:AutoHideTabStrip.Dock" Value="Bottom">
							<Setter TargetName="title" Property="RenderTransform">
								<Setter.Value>
									<TranslateTransform Y="-1" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource {x:Static themes:AssetResourceKeys.AutoHideTabItemBackgroundHoverBrushKey}}" />
							<Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:AssetResourceKeys.AutoHideTabItemBorderHoverBrushKey}}" />
							<Setter Property="Foreground" Value="{DynamicResource {x:Static themes:AssetResourceKeys.AutoHideTabItemForegroundHoverBrushKey}}" />
						</Trigger>
						<DataTrigger Binding="{Binding Converter={StaticResource IsTypeConverter}, ConverterParameter={x:Type HeaderedContentControl}}" Value="True">
							<Setter TargetName="contentPresenter" Property="Content" Value="{Binding DataContext.Header, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter TargetName="contentPresenter" Property="ContentTemplate" Value="{Binding DataContext.HeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
							<Setter TargetName="contentPresenter" Property="ContentTemplateSelector" Value="{Binding DataContext.HeaderTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}" />
						</DataTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition SourceName="contentPresenter" Property="Content" Value="{x:Null}" />
								<Condition SourceName="contentPresenter" Property="ContentTemplate" Value="{x:Null}" />
								<Condition SourceName="contentPresenter" Property="ContentTemplateSelector" Value="{x:Null}" />
							</MultiTrigger.Conditions>
							<Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
							<Setter TargetName="title" Property="Visibility" Value="Visible" />
						</MultiTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>